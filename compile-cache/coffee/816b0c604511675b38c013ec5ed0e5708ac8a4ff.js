(function() {
  var LineMeta;

  LineMeta = require("../../lib/helpers/line-meta");

  describe("LineMeta", function() {
    describe(".isList", function() {
      it("is not list", function() {
        return expect(LineMeta.isList("normal line")).toBe(false);
      });
      it("is not list, blockquote", function() {
        return expect(LineMeta.isList("> blockquote")).toBe(false);
      });
      it("is unordered list", function() {
        return expect(LineMeta.isList("- list")).toBe(true);
      });
      it("is unordered task list", function() {
        return expect(LineMeta.isList("- [ ]list")).toBe(true);
      });
      it("is unordered task list", function() {
        return expect(LineMeta.isList("- [ ] list")).toBe(true);
      });
      it("is ordered list", function() {
        return expect(LineMeta.isList("12. list")).toBe(true);
      });
      it("is ordered task list", function() {
        return expect(LineMeta.isList("12. [ ]list")).toBe(true);
      });
      return it("is ordered task list", function() {
        return expect(LineMeta.isList("12. [ ] list")).toBe(true);
      });
    });
    describe("normal line", function() {
      return it("is not continuous", function() {
        return expect(new LineMeta("normal line").isContinuous()).toBe(false);
      });
    });
    describe("unordered task list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("- [X] line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is ul list", function() {
        return expect(lineMeta.isList("ul")).toBe(true);
      });
      it("is not ol list", function() {
        return expect(lineMeta.isList("ol")).toBe(false);
      });
      it("is task list", function() {
        return expect(lineMeta.isTaskList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("-");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("- [ ] ");
      });
    });
    describe("unordered list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("- line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("-");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("- ");
      });
    });
    describe("ordered task list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("99. [X] line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is ol list", function() {
        return expect(lineMeta.isList("ol")).toBe(true);
      });
      it("is not ul list", function() {
        return expect(lineMeta.isList("ul")).toBe(false);
      });
      it("is task list", function() {
        return expect(lineMeta.isTaskList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("99");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("100. [ ] ");
      });
    });
    describe("ordered list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("3. line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("3");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("4. ");
      });
    });
    describe("empty list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("3.     ");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(true);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("3");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("4. ");
      });
    });
    return describe("blockquote", function() {
      var lineMeta;
      lineMeta = new LineMeta("  > blockquote");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(false);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("blockquote");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe(">");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("  > ");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/sarah/.atom/packages/markdown-writer/spec/helpers/line-meta-spec.coffee
