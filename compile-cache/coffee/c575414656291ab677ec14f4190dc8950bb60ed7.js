(function() {
  var JumpTo;

  JumpTo = require("../../lib/commands/jump-to");

  describe("JumpTo", function() {
    var editor;
    editor = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
      return runs(function() {
        return editor = atom.workspace.getActiveTextEditor();
      });
    });
    describe(".trigger", function() {
      it("triggers correct command", function() {
        var jumpTo;
        jumpTo = new JumpTo("next-heading");
        spyOn(jumpTo, "nextHeading");
        jumpTo.trigger({
          abortKeyBinding: function() {
            return {};
          }
        });
        return expect(jumpTo.nextHeading).toHaveBeenCalled();
      });
      return it("jumps to correct position", function() {
        var jumpTo;
        jumpTo = new JumpTo("previous-heading");
        jumpTo.previousHeading = function() {
          return [5, 5];
        };
        spyOn(jumpTo.editor, "setCursorBufferPosition");
        jumpTo.trigger();
        return expect(jumpTo.editor.setCursorBufferPosition).toHaveBeenCalledWith([5, 5]);
      });
    });
    describe(".previousHeading", function() {
      var text;
      text = "# Title\n\ncontent content\n\n## Subtitle\n\ncontent content";
      it("finds nothing if no headings", function() {
        var jumpTo;
        jumpTo = new JumpTo();
        return expect(jumpTo.previousHeading()).toBe(false);
      });
      it("finds nothing if no previous heading", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([0, 1]);
        jumpTo = new JumpTo();
        return expect(jumpTo.previousHeading()).toEqual(false);
      });
      it("finds previous subtitle", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([6, 6]);
        jumpTo = new JumpTo();
        return expect(jumpTo.previousHeading()).toEqual({
          row: 4,
          column: 0
        });
      });
      return it("finds previous title", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([4, 1]);
        jumpTo = new JumpTo();
        return expect(jumpTo.previousHeading()).toEqual({
          row: 0,
          column: 0
        });
      });
    });
    describe(".nextHeading", function() {
      var text;
      text = "# Title\n\ncontent content\n\n## Subtitle\n\ncontent content";
      it("finds nothing if no headings", function() {
        var jumpTo;
        jumpTo = new JumpTo();
        return expect(jumpTo.nextHeading()).toBe(false);
      });
      it("finds next subtitle", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([3, 6]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextHeading()).toEqual({
          row: 4,
          column: 0
        });
      });
      return it("finds top title", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([6, 5]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextHeading()).toEqual({
          row: 0,
          column: 0
        });
      });
    });
    describe(".referenceDefinition", function() {
      var text;
      text = "link to [content][]\n\n[content]: http://content";
      it("finds nothing if no word under cursor", function() {
        var jumpTo;
        jumpTo = new JumpTo();
        return expect(jumpTo.referenceDefinition()).toBe(false);
      });
      it("finds nothing if no link found", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([0, 2]);
        jumpTo = new JumpTo();
        return expect(jumpTo.referenceDefinition()).toBe(false);
      });
      it("finds link reference", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([2, 2]);
        jumpTo = new JumpTo();
        return expect(jumpTo.referenceDefinition()).toEqual([0, 16]);
      });
      return it("finds link definition", function() {
        var jumpTo;
        editor.setText(text);
        editor.setCursorBufferPosition([0, 16]);
        jumpTo = new JumpTo();
        return expect(jumpTo.referenceDefinition()).toEqual([2, 8]);
      });
    });
    return describe(".nextTableCell", function() {
      beforeEach(function() {
        return editor.setText("this is a table:\n\n| Header One | Header Two |\n|:-----------|:-----------|\n| Item One   | Item Two   |\n\nthis is another table:\n\nHeader One    |   Header Two | Header Three\n:-------------|-------------:|:-----------:\nItem One      |     Item Two |  Item Three");
      });
      it("finds nothing if it is not a table row", function() {
        var jumpTo;
        editor.setCursorBufferPosition([0, 2]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toBe(false);
      });
      it("finds row 1, cell 2 in table 1", function() {
        var jumpTo;
        editor.setCursorBufferPosition([2, 2]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toEqual([2, 25]);
      });
      it("finds row 2, cell 1 in table 1 from end of row 1", function() {
        var jumpTo;
        editor.setCursorBufferPosition([2, 25]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toEqual([4, 10]);
      });
      it("finds row 2, cell 1 in table 1 from row separator", function() {
        var jumpTo;
        editor.setCursorBufferPosition([3, 0]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toEqual([4, 10]);
      });
      it("finds row 1, cell 3 in table 2", function() {
        var jumpTo;
        editor.setCursorBufferPosition([8, 24]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toEqual([8, 43]);
      });
      return it("finds row 2, cell 1 in table 2", function() {
        var jumpTo;
        editor.setCursorBufferPosition([8, 42]);
        jumpTo = new JumpTo();
        return expect(jumpTo.nextTableCell()).toEqual([10, 8]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/sarah/.atom/packages/markdown-writer/spec/commands/jump-to-spec.coffee
