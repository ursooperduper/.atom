(function() {
  var Project;

  Project = require('../lib/project');

  describe("Project", function() {
    it("recieves default properties", function() {
      var project, properties;
      properties = {
        title: "Test",
        paths: ["/Users/"]
      };
      project = new Project(properties);
      return expect(project.props.icon).toBe('icon-chevron-right');
    });
    it("does not validate without proper properties", function() {
      var project, properties;
      properties = {
        title: "Test"
      };
      project = new Project(properties);
      return expect(project.isValid()).toBe(false);
    });
    it("automatically updates it's properties", function() {
      var project, props;
      props = {
        _id: 'test',
        title: "Test",
        paths: ["/Users/test"]
      };
      project = new Project(props);
      spyOn(project, 'updateProps').andCallThrough();
      spyOn(project.db, 'readFile').andCallFake(function(callback) {
        props = {
          test: {
            _id: 'test',
            title: "Test",
            paths: ["/Users/test"],
            icon: 'icon-test'
          }
        };
        return callback(props);
      });
      project.db.emitter.emit('db-updated');
      expect(project.updateProps).toHaveBeenCalled();
      return expect(project.props.icon).toBe('icon-test');
    });
    it("automatically updates it's properties even though key have changed", function() {
      var project, props;
      props = {
        _id: 'test',
        title: "Test",
        paths: ["/Users/test"]
      };
      project = new Project(props);
      spyOn(project, 'updateProps').andCallThrough();
      spyOn(project.db, 'readFile').andCallFake(function(callback) {
        props = {
          testtest: {
            _id: 'testtest',
            title: "Test",
            paths: ["/Users/test"],
            icon: 'icon-test'
          }
        };
        return callback(props);
      });
      expect(project.db.searchKey).toBe('_id');
      expect(project.db.searchValue).toBe('test');
      project.db.emitter.emit('db-updated');
      expect(project.updateProps).toHaveBeenCalled();
      expect(project.props._id).toBe('testtest');
      expect(project.props.icon).toBe('icon-test');
      expect(project.db.searchKey).toBe('_id');
      return expect(project.db.searchValue).toBe('testtest');
    });
    describe("::set/::unset", function() {
      var project;
      project = null;
      beforeEach(function() {
        project = new Project();
        spyOn(project.db, 'add').andCallFake(function(props, callback) {
          var id;
          id = props.title.replace(/\s+/g, '').toLowerCase();
          return typeof callback === "function" ? callback(id) : void 0;
        });
        return spyOn(project.db, 'update').andCallFake(function(props, callback) {
          return typeof callback === "function" ? callback() : void 0;
        });
      });
      return it("sets and unsets the value", function() {
        expect(project.props.title).toBe('');
        project.set('title', 'test');
        expect(project.props.title).toBe('test');
        expect(project.propsToSave).toContain('title');
        project.unset('title');
        expect(project.props.title).toBe('');
        return expect(project.propsToSave).not.toContain('title');
      });
    });
    return describe("::save", function() {
      var project;
      project = null;
      beforeEach(function() {
        project = new Project();
        spyOn(project.db, 'add').andCallFake(function(props, callback) {
          var id;
          id = props.title.replace(/\s+/g, '').toLowerCase();
          return typeof callback === "function" ? callback(id) : void 0;
        });
        return spyOn(project.db, 'update').andCallFake(function(props, callback) {
          return typeof callback === "function" ? callback() : void 0;
        });
      });
      it("does not save if not valid", function() {
        return expect(project.save()).toBe(false);
      });
      it("saves project if _id isn't set", function() {
        project.set('title', 'Test');
        project.set('paths', ["/Users/"]);
        expect(project.save()).toBe(true);
        expect(project.db.add).toHaveBeenCalled();
        return expect(project.props._id).toBe('test');
      });
      return it("updates project if _id is set", function() {
        project.set('title', 'Test');
        project.set('paths', ["/Users/"]);
        project.props._id = 'test';
        expect(project.save()).toBe(true);
        return expect(project.db.update).toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NhcmFoLy5hdG9tL3BhY2thZ2VzL3Byb2plY3QtbWFuYWdlci9zcGVjL3Byb2plY3Qtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsT0FBQTs7QUFBQSxFQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsZ0JBQVIsQ0FBVixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLFNBQVQsRUFBb0IsU0FBQSxHQUFBO0FBQ2xCLElBQUEsRUFBQSxDQUFHLDZCQUFILEVBQWtDLFNBQUEsR0FBQTtBQUNoQyxVQUFBLG1CQUFBO0FBQUEsTUFBQSxVQUFBLEdBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxNQUFQO0FBQUEsUUFDQSxLQUFBLEVBQU8sQ0FBQyxTQUFELENBRFA7T0FERixDQUFBO0FBQUEsTUFHQSxPQUFBLEdBQWMsSUFBQSxPQUFBLENBQVEsVUFBUixDQUhkLENBQUE7YUFLQSxNQUFBLENBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFyQixDQUEwQixDQUFDLElBQTNCLENBQWdDLG9CQUFoQyxFQU5nQztJQUFBLENBQWxDLENBQUEsQ0FBQTtBQUFBLElBUUEsRUFBQSxDQUFHLDZDQUFILEVBQWtELFNBQUEsR0FBQTtBQUNoRCxVQUFBLG1CQUFBO0FBQUEsTUFBQSxVQUFBLEdBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxNQUFQO09BREYsQ0FBQTtBQUFBLE1BRUEsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFRLFVBQVIsQ0FGZCxDQUFBO2FBR0EsTUFBQSxDQUFPLE9BQU8sQ0FBQyxPQUFSLENBQUEsQ0FBUCxDQUF5QixDQUFDLElBQTFCLENBQStCLEtBQS9CLEVBSmdEO0lBQUEsQ0FBbEQsQ0FSQSxDQUFBO0FBQUEsSUFjQSxFQUFBLENBQUcsdUNBQUgsRUFBNEMsU0FBQSxHQUFBO0FBQzFDLFVBQUEsY0FBQTtBQUFBLE1BQUEsS0FBQSxHQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssTUFBTDtBQUFBLFFBQ0EsS0FBQSxFQUFPLE1BRFA7QUFBQSxRQUVBLEtBQUEsRUFBTyxDQUFDLGFBQUQsQ0FGUDtPQURGLENBQUE7QUFBQSxNQUlBLE9BQUEsR0FBYyxJQUFBLE9BQUEsQ0FBUSxLQUFSLENBSmQsQ0FBQTtBQUFBLE1BTUEsS0FBQSxDQUFNLE9BQU4sRUFBZSxhQUFmLENBQTZCLENBQUMsY0FBOUIsQ0FBQSxDQU5BLENBQUE7QUFBQSxNQU9BLEtBQUEsQ0FBTSxPQUFPLENBQUMsRUFBZCxFQUFrQixVQUFsQixDQUE2QixDQUFDLFdBQTlCLENBQTBDLFNBQUMsUUFBRCxHQUFBO0FBQ3hDLFFBQUEsS0FBQSxHQUNFO0FBQUEsVUFBQSxJQUFBLEVBQ0U7QUFBQSxZQUFBLEdBQUEsRUFBSyxNQUFMO0FBQUEsWUFDQSxLQUFBLEVBQU8sTUFEUDtBQUFBLFlBRUEsS0FBQSxFQUFPLENBQUMsYUFBRCxDQUZQO0FBQUEsWUFHQSxJQUFBLEVBQU0sV0FITjtXQURGO1NBREYsQ0FBQTtlQU1BLFFBQUEsQ0FBUyxLQUFULEVBUHdDO01BQUEsQ0FBMUMsQ0FQQSxDQUFBO0FBQUEsTUFnQkEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBbkIsQ0FBd0IsWUFBeEIsQ0FoQkEsQ0FBQTtBQUFBLE1Ba0JBLE1BQUEsQ0FBTyxPQUFPLENBQUMsV0FBZixDQUEyQixDQUFDLGdCQUE1QixDQUFBLENBbEJBLENBQUE7YUFtQkEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBckIsQ0FBMEIsQ0FBQyxJQUEzQixDQUFnQyxXQUFoQyxFQXBCMEM7SUFBQSxDQUE1QyxDQWRBLENBQUE7QUFBQSxJQW9DQSxFQUFBLENBQUcsb0VBQUgsRUFBeUUsU0FBQSxHQUFBO0FBQ3ZFLFVBQUEsY0FBQTtBQUFBLE1BQUEsS0FBQSxHQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssTUFBTDtBQUFBLFFBQ0EsS0FBQSxFQUFPLE1BRFA7QUFBQSxRQUVBLEtBQUEsRUFBTyxDQUFDLGFBQUQsQ0FGUDtPQURGLENBQUE7QUFBQSxNQUlBLE9BQUEsR0FBYyxJQUFBLE9BQUEsQ0FBUSxLQUFSLENBSmQsQ0FBQTtBQUFBLE1BTUEsS0FBQSxDQUFNLE9BQU4sRUFBZSxhQUFmLENBQTZCLENBQUMsY0FBOUIsQ0FBQSxDQU5BLENBQUE7QUFBQSxNQU9BLEtBQUEsQ0FBTSxPQUFPLENBQUMsRUFBZCxFQUFrQixVQUFsQixDQUE2QixDQUFDLFdBQTlCLENBQTBDLFNBQUMsUUFBRCxHQUFBO0FBQ3hDLFFBQUEsS0FBQSxHQUNFO0FBQUEsVUFBQSxRQUFBLEVBQ0U7QUFBQSxZQUFBLEdBQUEsRUFBSyxVQUFMO0FBQUEsWUFDQSxLQUFBLEVBQU8sTUFEUDtBQUFBLFlBRUEsS0FBQSxFQUFPLENBQUMsYUFBRCxDQUZQO0FBQUEsWUFHQSxJQUFBLEVBQU0sV0FITjtXQURGO1NBREYsQ0FBQTtlQU1BLFFBQUEsQ0FBUyxLQUFULEVBUHdDO01BQUEsQ0FBMUMsQ0FQQSxDQUFBO0FBQUEsTUFnQkEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBbEIsQ0FBNEIsQ0FBQyxJQUE3QixDQUFrQyxLQUFsQyxDQWhCQSxDQUFBO0FBQUEsTUFpQkEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsV0FBbEIsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxNQUFwQyxDQWpCQSxDQUFBO0FBQUEsTUFrQkEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBbkIsQ0FBd0IsWUFBeEIsQ0FsQkEsQ0FBQTtBQUFBLE1Bb0JBLE1BQUEsQ0FBTyxPQUFPLENBQUMsV0FBZixDQUEyQixDQUFDLGdCQUE1QixDQUFBLENBcEJBLENBQUE7QUFBQSxNQXFCQSxNQUFBLENBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFyQixDQUF5QixDQUFDLElBQTFCLENBQStCLFVBQS9CLENBckJBLENBQUE7QUFBQSxNQXNCQSxNQUFBLENBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFyQixDQUEwQixDQUFDLElBQTNCLENBQWdDLFdBQWhDLENBdEJBLENBQUE7QUFBQSxNQXVCQSxNQUFBLENBQU8sT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFsQixDQUE0QixDQUFDLElBQTdCLENBQWtDLEtBQWxDLENBdkJBLENBQUE7YUF3QkEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsV0FBbEIsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxVQUFwQyxFQXpCdUU7SUFBQSxDQUF6RSxDQXBDQSxDQUFBO0FBQUEsSUFnRUEsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQSxHQUFBO0FBQ3hCLFVBQUEsT0FBQTtBQUFBLE1BQUEsT0FBQSxHQUFVLElBQVYsQ0FBQTtBQUFBLE1BRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULFFBQUEsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFBLENBQWQsQ0FBQTtBQUFBLFFBQ0EsS0FBQSxDQUFNLE9BQU8sQ0FBQyxFQUFkLEVBQWtCLEtBQWxCLENBQXdCLENBQUMsV0FBekIsQ0FBcUMsU0FBQyxLQUFELEVBQVEsUUFBUixHQUFBO0FBQ25DLGNBQUEsRUFBQTtBQUFBLFVBQUEsRUFBQSxHQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBWixDQUFvQixNQUFwQixFQUE0QixFQUE1QixDQUErQixDQUFDLFdBQWhDLENBQUEsQ0FBTCxDQUFBO2tEQUNBLFNBQVUsYUFGeUI7UUFBQSxDQUFyQyxDQURBLENBQUE7ZUFJQSxLQUFBLENBQU0sT0FBTyxDQUFDLEVBQWQsRUFBa0IsUUFBbEIsQ0FBMkIsQ0FBQyxXQUE1QixDQUF3QyxTQUFDLEtBQUQsRUFBUSxRQUFSLEdBQUE7a0RBQ3RDLG9CQURzQztRQUFBLENBQXhDLEVBTFM7TUFBQSxDQUFYLENBRkEsQ0FBQTthQVVBLEVBQUEsQ0FBRywyQkFBSCxFQUFnQyxTQUFBLEdBQUE7QUFDOUIsUUFBQSxNQUFBLENBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFyQixDQUEyQixDQUFDLElBQTVCLENBQWlDLEVBQWpDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCLE1BQXJCLENBREEsQ0FBQTtBQUFBLFFBRUEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBckIsQ0FBMkIsQ0FBQyxJQUE1QixDQUFpQyxNQUFqQyxDQUZBLENBQUE7QUFBQSxRQUdBLE1BQUEsQ0FBTyxPQUFPLENBQUMsV0FBZixDQUEyQixDQUFDLFNBQTVCLENBQXNDLE9BQXRDLENBSEEsQ0FBQTtBQUFBLFFBS0EsT0FBTyxDQUFDLEtBQVIsQ0FBYyxPQUFkLENBTEEsQ0FBQTtBQUFBLFFBTUEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBckIsQ0FBMkIsQ0FBQyxJQUE1QixDQUFpQyxFQUFqQyxDQU5BLENBQUE7ZUFPQSxNQUFBLENBQU8sT0FBTyxDQUFDLFdBQWYsQ0FBMkIsQ0FBQyxHQUFHLENBQUMsU0FBaEMsQ0FBMEMsT0FBMUMsRUFSOEI7TUFBQSxDQUFoQyxFQVh3QjtJQUFBLENBQTFCLENBaEVBLENBQUE7V0FzRkEsUUFBQSxDQUFTLFFBQVQsRUFBbUIsU0FBQSxHQUFBO0FBQ2pCLFVBQUEsT0FBQTtBQUFBLE1BQUEsT0FBQSxHQUFVLElBQVYsQ0FBQTtBQUFBLE1BRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULFFBQUEsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFBLENBQWQsQ0FBQTtBQUFBLFFBQ0EsS0FBQSxDQUFNLE9BQU8sQ0FBQyxFQUFkLEVBQWtCLEtBQWxCLENBQXdCLENBQUMsV0FBekIsQ0FBcUMsU0FBQyxLQUFELEVBQVEsUUFBUixHQUFBO0FBQ25DLGNBQUEsRUFBQTtBQUFBLFVBQUEsRUFBQSxHQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBWixDQUFvQixNQUFwQixFQUE0QixFQUE1QixDQUErQixDQUFDLFdBQWhDLENBQUEsQ0FBTCxDQUFBO2tEQUNBLFNBQVUsYUFGeUI7UUFBQSxDQUFyQyxDQURBLENBQUE7ZUFJQSxLQUFBLENBQU0sT0FBTyxDQUFDLEVBQWQsRUFBa0IsUUFBbEIsQ0FBMkIsQ0FBQyxXQUE1QixDQUF3QyxTQUFDLEtBQUQsRUFBUSxRQUFSLEdBQUE7a0RBQ3RDLG9CQURzQztRQUFBLENBQXhDLEVBTFM7TUFBQSxDQUFYLENBRkEsQ0FBQTtBQUFBLE1BVUEsRUFBQSxDQUFHLDRCQUFILEVBQWlDLFNBQUEsR0FBQTtlQUMvQixNQUFBLENBQU8sT0FBTyxDQUFDLElBQVIsQ0FBQSxDQUFQLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsS0FBNUIsRUFEK0I7TUFBQSxDQUFqQyxDQVZBLENBQUE7QUFBQSxNQWFBLEVBQUEsQ0FBRyxnQ0FBSCxFQUFxQyxTQUFBLEdBQUE7QUFDbkMsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFBcUIsTUFBckIsQ0FBQSxDQUFBO0FBQUEsUUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFBcUIsQ0FBQyxTQUFELENBQXJCLENBREEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLE9BQU8sQ0FBQyxJQUFSLENBQUEsQ0FBUCxDQUFzQixDQUFDLElBQXZCLENBQTRCLElBQTVCLENBSEEsQ0FBQTtBQUFBLFFBSUEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBbEIsQ0FBc0IsQ0FBQyxnQkFBdkIsQ0FBQSxDQUpBLENBQUE7ZUFLQSxNQUFBLENBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFyQixDQUF5QixDQUFDLElBQTFCLENBQStCLE1BQS9CLEVBTm1DO01BQUEsQ0FBckMsQ0FiQSxDQUFBO2FBcUJBLEVBQUEsQ0FBRywrQkFBSCxFQUFvQyxTQUFBLEdBQUE7QUFDbEMsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFBcUIsTUFBckIsQ0FBQSxDQUFBO0FBQUEsUUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFBcUIsQ0FBQyxTQUFELENBQXJCLENBREEsQ0FBQTtBQUFBLFFBRUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFkLEdBQW9CLE1BRnBCLENBQUE7QUFBQSxRQUlBLE1BQUEsQ0FBTyxPQUFPLENBQUMsSUFBUixDQUFBLENBQVAsQ0FBc0IsQ0FBQyxJQUF2QixDQUE0QixJQUE1QixDQUpBLENBQUE7ZUFLQSxNQUFBLENBQU8sT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFsQixDQUF5QixDQUFDLGdCQUExQixDQUFBLEVBTmtDO01BQUEsQ0FBcEMsRUF0QmlCO0lBQUEsQ0FBbkIsRUF2RmtCO0VBQUEsQ0FBcEIsQ0FGQSxDQUFBO0FBQUEiCn0=

//# sourceURL=/Users/sarah/.atom/packages/project-manager/spec/project-spec.coffee
