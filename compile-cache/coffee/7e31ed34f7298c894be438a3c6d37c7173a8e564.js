(function() {
  describe('editor-linter', function() {
    var EditorLinter, editorLinter, getMessage, textEditor;
    getMessage = require('./common').getMessage;
    EditorLinter = require('../lib/editor-linter');
    editorLinter = null;
    textEditor = null;
    beforeEach(function() {
      return waitsForPromise(function() {
        atom.workspace.destroyActivePaneItem();
        return atom.workspace.open(__dirname + '/fixtures/file.txt').then(function() {
          if (editorLinter != null) {
            editorLinter.dispose();
          }
          textEditor = atom.workspace.getActiveTextEditor();
          return editorLinter = new EditorLinter(textEditor);
        });
      });
    });
    describe('::constructor', function() {
      return it("cries when provided argument isn't a TextEditor", function() {
        expect(function() {
          return new EditorLinter;
        }).toThrow();
        expect(function() {
          return new EditorLinter(null);
        }).toThrow();
        return expect(function() {
          return new EditorLinter(55);
        }).toThrow();
      });
    });
    describe('::{add, remove}Message', function() {
      return it('adds/removes decorations from the editor', function() {
        var countDecorations, message;
        countDecorations = textEditor.getDecorations().length;
        editorLinter.underlineIssues = true;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        editorLinter.addMessage(message);
        expect(textEditor.getDecorations().length).toBe(countDecorations + 1);
        editorLinter.deleteMessage(message);
        return expect(textEditor.getDecorations().length).toBe(countDecorations);
      });
    });
    describe('::getMessages', function() {
      return it('returns a set of messages', function() {
        var message, messageSet;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageSet = editorLinter.getMessages();
        editorLinter.addMessage(message);
        expect(messageSet.has(message)).toBe(true);
        editorLinter.deleteMessage(message);
        return expect(messageSet.has(message)).toBe(false);
      });
    });
    describe('::onDidMessage{Add, Change, Delete}', function() {
      return it('notifies us of the changes to messages', function() {
        var message, messageAdd, messageChange, messageRemove;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageAdd = jasmine.createSpy('messageAdd');
        messageChange = jasmine.createSpy('messageChange');
        messageRemove = jasmine.createSpy('messageRemove');
        editorLinter.onDidMessageAdd(messageAdd);
        editorLinter.onDidMessageChange(messageChange);
        editorLinter.onDidMessageDelete(messageRemove);
        editorLinter.addMessage(message);
        expect(messageAdd).toHaveBeenCalled();
        expect(messageAdd).toHaveBeenCalledWith(message);
        expect(messageChange).toHaveBeenCalled();
        expect(messageChange.mostRecentCall.args[0].type).toBe('add');
        expect(messageChange.mostRecentCall.args[0].message).toBe(message);
        editorLinter.deleteMessage(message);
        expect(messageRemove).toHaveBeenCalled();
        expect(messageRemove).toHaveBeenCalledWith(message);
        expect(messageChange.mostRecentCall.args[0].type).toBe('delete');
        return expect(messageChange.mostRecentCall.args[0].message).toBe(message);
      });
    });
    describe('::{handle, add, remove}Gutter', function() {
      return it('handles the attachment and detachment of gutter to text editor', function() {
        editorLinter.gutterEnabled = false;
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.gutterEnabled = true;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.gutterEnabled = false;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.addGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.removeGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.removeGutter();
        return expect(editorLinter.gutter === null).toBe(true);
      });
    });
    describe('::onShouldLint', function() {
      return it('ignores instant save requests', function() {
        var timesTriggered;
        timesTriggered = 0;
        editorLinter.onShouldLint(function() {
          return timesTriggered++;
        });
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        return expect(timesTriggered).toBe(5);
      });
    });
    return describe('::onDidDestroy', function() {
      return it('is called when TextEditor is destroyed', function() {
        var didDestroy;
        didDestroy = false;
        editorLinter.onDidDestroy(function() {
          return didDestroy = true;
        });
        textEditor.destroy();
        return expect(didDestroy).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NhcmFoLy5hdG9tL3BhY2thZ2VzL2xpbnRlci9zcGVjL2VkaXRvci1saW50ZXItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLEVBQUEsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQSxHQUFBO0FBQ3hCLFFBQUEsa0RBQUE7QUFBQSxJQUFDLGFBQWMsT0FBQSxDQUFRLFVBQVIsRUFBZCxVQUFELENBQUE7QUFBQSxJQUNBLFlBQUEsR0FBZSxPQUFBLENBQVEsc0JBQVIsQ0FEZixDQUFBO0FBQUEsSUFFQSxZQUFBLEdBQWUsSUFGZixDQUFBO0FBQUEsSUFHQSxVQUFBLEdBQWEsSUFIYixDQUFBO0FBQUEsSUFLQSxVQUFBLENBQVcsU0FBQSxHQUFBO2FBQ1QsZUFBQSxDQUFnQixTQUFBLEdBQUE7QUFDZCxRQUFBLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQWYsQ0FBQSxDQUFBLENBQUE7ZUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQWYsQ0FBb0IsU0FBQSxHQUFZLG9CQUFoQyxDQUFxRCxDQUFDLElBQXRELENBQTJELFNBQUEsR0FBQTs7WUFDekQsWUFBWSxDQUFFLE9BQWQsQ0FBQTtXQUFBO0FBQUEsVUFDQSxVQUFBLEdBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBZixDQUFBLENBRGIsQ0FBQTtpQkFFQSxZQUFBLEdBQW1CLElBQUEsWUFBQSxDQUFhLFVBQWIsRUFIc0M7UUFBQSxDQUEzRCxFQUZjO01BQUEsQ0FBaEIsRUFEUztJQUFBLENBQVgsQ0FMQSxDQUFBO0FBQUEsSUFhQSxRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBLEdBQUE7YUFDeEIsRUFBQSxDQUFHLGlEQUFILEVBQXNELFNBQUEsR0FBQTtBQUNwRCxRQUFBLE1BQUEsQ0FBTyxTQUFBLEdBQUE7aUJBQ0wsR0FBQSxDQUFBLGFBREs7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

//# sourceURL=/Users/sarah/.atom/packages/linter/spec/editor-linter-spec.coffee
