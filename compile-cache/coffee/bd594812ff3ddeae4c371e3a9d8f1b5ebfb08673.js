(function() {
  var StyleLine;

  StyleLine = require("../../lib/commands/style-line");

  describe("StyleLine", function() {
    describe(".isStyleOn", function() {
      it("check heading 1 exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "# heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check heading 1 not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "## heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
      it("check ul exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "* unordered list";
        expect(cmd.isStyleOn(fixture)).toBe(true);
        fixture = "- unordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check ul not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "a normal list";
        expect(cmd.isStyleOn(fixture)).toBe(false);
        fixture = "0. ordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".addStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "## heading 1 ##";
        return expect(cmd.addStyle(fixture)).toBe("# heading 1 #");
      });
      it("applies heading 2 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h2");
        fixture = "# heading 2";
        return expect(cmd.addStyle(fixture)).toBe("## heading 2");
      });
      return it("applies blockquote styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("blockquote");
        fixture = "blockquote";
        return expect(cmd.addStyle(fixture)).toBe("> blockquote");
      });
    });
    describe(".removeStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "# heading 1 #";
        return expect(cmd.removeStyle(fixture)).toBe("heading 1");
      });
      it("remove heading 3 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h3");
        fixture = "### heading 3";
        return expect(cmd.removeStyle(fixture)).toBe("heading 3");
      });
      return it("remove ol styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ol");
        fixture = "123. ordered list";
        return expect(cmd.removeStyle(fixture)).toBe("ordered list");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty blockquote style", function() {
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> ");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply heading 2", function() {
        editor.setText("# heading");
        new StyleLine("h2").trigger();
        expect(editor.getText()).toBe("## heading");
        return expect(editor.getCursorBufferPosition().column).toBe(10);
      });
      it("remove heading 3", function() {
        editor.setText("### heading");
        new StyleLine("h3").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(7);
      });
      it("apply ordered/unordered list", function() {
        editor.setText("- list");
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list");
        expect(editor.getCursorBufferPosition().column).toBe(7);
        new StyleLine("ul").trigger();
        expect(editor.getText()).toBe("- list");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("apply task/taskdone list", function() {
        editor.setText("task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("taskdone").trigger();
        expect(editor.getText()).toBe("- [X] task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NhcmFoLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9zcGVjL2NvbW1hbmRzL3N0eWxlLWxpbmUtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsU0FBQTs7QUFBQSxFQUFBLFNBQUEsR0FBWSxPQUFBLENBQVEsK0JBQVIsQ0FBWixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLFdBQVQsRUFBc0IsU0FBQSxHQUFBO0FBQ3BCLElBQUEsUUFBQSxDQUFTLFlBQVQsRUFBdUIsU0FBQSxHQUFBO0FBQ3JCLE1BQUEsRUFBQSxDQUFHLHdCQUFILEVBQTZCLFNBQUEsR0FBQTtBQUMzQixZQUFBLFlBQUE7QUFBQSxRQUFBLEdBQUEsR0FBVSxJQUFBLFNBQUEsQ0FBVSxJQUFWLENBQVYsQ0FBQTtBQUFBLFFBQ0EsT0FBQSxHQUFVLGFBRFYsQ0FBQTtlQUVBLE1BQUEsQ0FBTyxHQUFHLENBQUMsU0FBSixDQUFjLE9BQWQsQ0FBUCxDQUE4QixDQUFDLElBQS9CLENBQW9DLElBQXBDLEVBSDJCO01BQUEsQ0FBN0IsQ0FBQSxDQUFBO0FBQUEsTUFLQSxFQUFBLENBQUcsNEJBQUgsRUFBaUMsU0FBQSxHQUFBO0FBQy9CLFlBQUEsWUFBQTtBQUFBLFFBQUEsR0FBQSxHQUFVLElBQUEsU0FBQSxDQUFVLElBQVYsQ0FBVixDQUFBO0FBQUEsUUFDQSxPQUFBLEdBQVUsY0FEVixDQUFBO2VBRUEsTUFBQSxDQUFPLEdBQUcsQ0FBQyxTQUFKLENBQWMsT0FBZCxDQUFQLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsS0FBcEMsRUFIK0I7TUFBQSxDQUFqQyxDQUxBLENBQUE7QUFBQSxNQVVBLEVBQUEsQ0FBRyxpQkFBSCxFQUFzQixTQUFBLEdBQUE7QUFDcEIsWUFBQSxZQUFBO0FBQUEsUUFBQSxHQUFBLEdBQVUsSUFB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

//# sourceURL=/Users/sarah/.atom/packages/markdown-writer/spec/commands/style-line-spec.coffee
