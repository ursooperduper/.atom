(function() {
  var Builder, Emitter, JekyllEmitter, JekyllNewPostView, JekyllToolbarView, Server, fs;

  fs = require('fs-plus');

  Emitter = require('atom').Emitter;

  JekyllEmitter = new Emitter;

  JekyllNewPostView = require('./new-post-view');

  JekyllToolbarView = require('./toolbar-view');

  Builder = require('./server/build');

  Server = require('./server/server');

  module.exports = {
    jekyllNewPostView: null,
    config: {
      layoutsDir: {
        type: 'string',
        "default": '_layouts/'
      },
      layoutsType: {
        type: 'string',
        "default": '.html'
      },
      postsDir: {
        type: 'string',
        "default": '_posts/'
      },
      postsType: {
        type: 'string',
        "default": '.markdown'
      },
      includesDir: {
        type: 'string',
        "default": '_includes/'
      },
      dataDir: {
        type: 'string',
        "default": '_data/'
      },
      draftByDefault: {
        type: 'boolean',
        "default": false
      },
      draftsDir: {
        type: 'string',
        "default": '_drafts/'
      },
      serverPort: {
        type: 'integer',
        "default": 3000
      },
      buildCommand: {
        type: 'array',
        "default": ['jekyll', 'build'],
        items: {
          type: 'string'
        }
      },
      siteDir: {
        type: 'string',
        "default": '_site/'
      }
    },
    activate: function() {
      var _ref;
      atom.commands.add('atom-workspace', "jekyll:open-layout", (function(_this) {
        return function() {
          return _this.openLayout();
        };
      })(this));
      atom.commands.add('atom-workspace', "jekyll:open-config", (function(_this) {
        return function() {
          return _this.openConfig();
        };
      })(this));
      atom.commands.add('atom-workspace', "jekyll:open-include", (function(_this) {
        return function() {
          return _this.openInclude();
        };
      })(this));
      atom.commands.add('atom-workspace', "jekyll:open-data", (function(_this) {
        return function() {
          return _this.openData();
        };
      })(this));
      atom.commands.add('atom-workspace', "jekyll:toolbar", (function(_this) {
        return function() {
          return _this.toolbar();
        };
      })(this));
      atom.commands.add('atom-workspace', "jekyll:toggle-server", (function(_this) {
        return function() {
          return _this.toggleServer();
        };
      })(this));
      atom.commands.add('atom-workspace', 'jekyll:new-post', (function(_this) {
        return function() {
          return _this.newPost();
        };
      })(this));
      atom.commands.add('atom-workspace', 'jekyll:build-site', (function(_this) {
        return function() {
          return _this.buildSite();
        };
      })(this));
      atom.commands.add('atom-workspace', 'jekyll:publish-draft', (function(_this) {
        return function() {
          return _this.publishDraft();
        };
      })(this));
      this.jekyllNewPostView = new JekyllNewPostView();
      if (typeof this.toolbarView === 'undefined') {
        this.toolbarView = new JekyllToolbarView(JekyllEmitter);
      }
      this.toolbarPanel = atom.workspace.addBottomPanel({
        item: this.toolbarView,
        visible: false,
        className: 'tool-panel panel-bottom'
      });
      this.toolbarView.setPanel(this.toolbarPanel);
      return (_ref = atom.workspace.statusBar) != null ? _ref.appendRight(new JekyllStatusBar(JekyllEmitter)) : void 0;
    },
    deactivate: function() {
      return Server.stop();
    },
    serialize: function() {
      return Server.stop();
    },
    showError: function(message) {
      return console.log(message);
    },
    openLayout: function() {
      var activeEditor, contents, error, layout;
      activeEditor = atom.workspace.getActiveTextEditor();
      contents = activeEditor.getText();
      try {
        layout = this.scan(contents, /layout: (.*?)[\r\n|\n\r|\r|\n]/g)[0][0];
        return atom.workspace.open(atom.config.get('jekyll.layoutsDir') + layout + atom.config.get('jekyll.layoutsType'));
      } catch (_error) {
        error = _error;
        return this.showError(error.message);
      }
    },
    openInclude: function() {
      var activeEditor, error, include, line;
      activeEditor = atom.workspace.getActiveTextEditor();
      line = activeEditor.getCursor().getCurrentBufferLine();
      try {
        include = this.scan(line, /{% include (.*?)%}/g)[0][0].split(" ")[0];
        return atom.workspace.open(atom.config.get('jekyll.includesDir') + include);
      } catch (_error) {
        error = _error;
        return this.showError(error.message);
      }
    },
    openConfig: function() {
      return atom.workspace.open("_config.yml");
    },
    openData: function() {
      var activeEditor, data, error, line;
      activeEditor = atom.workspace.getActiveTextEditor();
      line = activeEditor.getCursor().getCurrentBufferLine();
      try {
        data = this.scan(line, /site\.data\.(.*?) /g)[0][0].split(" ")[0];
        return atom.workspace.open(atom.config.get('jekyll.dataDir') + data + ".yml");
      } catch (_error) {
        error = _error;
        return this.showError(error.message);
      }
    },
    manage: function() {
      return atom.workspace.open('atom://jekyll');
    },
    toolbar: function() {
      this.toolbarPanel.show();
      return this.toolbarView.refresh(Server);
    },
    scan: function(string, pattern) {
      var matches, results;
      matches = [];
      results = [];
      while (matches = pattern.exec(string)) {
        matches.shift();
        results.push(matches);
      }
      return results;
    },
    toggleServer: function() {
      return Server.toggle();
    },
    newPost: function() {
      this.jekyllNewPostView.attach();
      return this.jekyllNewPostView.miniEditor.focus();
    },
    buildSite: function() {
      return Builder.build();
    },
    publishDraft: function() {
      var activeEditor, contents, currentFileName, currentFilePath, newContents, newFileName, newFilePath, _ref, _ref1;
      activeEditor = atom.workspace.getActiveTextEditor();
      activeEditor.save();
      currentFilePath = activeEditor != null ? (_ref = activeEditor.buffer) != null ? (_ref1 = _ref.file) != null ? _ref1.path : void 0 : void 0 : void 0;
      currentFileName = currentFilePath.split("/").reverse()[0];
      newFileName = this.generateFileName(this.getPostTitle(activeEditor));
      newFilePath = currentFilePath.replace(atom.config.get('jekyll.draftsDir') + currentFileName, atom.config.get('jekyll.postsDir') + newFileName) + atom.config.get('jekyll.postsType');
      contents = activeEditor.getText();
      newContents = contents.replace(/date: "[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}"/, "date: \"" + (this.generateDateString()) + "\"");
      fs.writeFileSync(newFilePath, newContents);
      fs.unlinkSync(currentFilePath);
      atom.workspace.open(newFilePath);
      return activeEditor.destroy();
    },
    getPostTitle: function(editor) {
      var contents, title;
      contents = editor.getText();
      return title = this.scan(contents, /title: (.*?)[\r\n|\n\r|\r|\n]/g)[0][0];
    },
    generateFileName: function(title) {
      var titleString;
      titleString = title.toLowerCase().replace(/[^\w\s]|_/g, "").replace(RegExp(" ", 'g'), "-");
      return this.generateDateString() + '-' + titleString;
    },
    generateDateString: function(currentTime) {
      if (currentTime == null) {
        currentTime = new Date();
      }
      return currentTime.getFullYear() + "-" + ("0" + (currentTime.getMonth() + 1)).slice(-2) + "-" + ("0" + currentTime.getDate()).slice(-2);
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/sarah/.atom/packages/jekyll/lib/jekyll.coffee
