(function() {
  var $, Project, ProjectsListView;

  ProjectsListView = require('../lib/projects-list-view');

  Project = require('../lib/project');

  $ = require('atom-space-pen-views').$;

  describe("List View", function() {
    var data, filterEditorView, list, listView, projects, workspaceElement, _ref;
    _ref = [], listView = _ref[0], workspaceElement = _ref[1], list = _ref[2], filterEditorView = _ref[3];
    data = {
      testproject1: {
        _id: 'testproject1',
        title: "Test project 1",
        paths: ["/Users/project-1"]
      },
      testproject2: {
        _id: 'testproject2',
        title: "Test project 2",
        paths: ["/Users/project-2"],
        template: "test-template",
        icon: "icon-bug",
        group: "Test"
      }
    };
    projects = function() {
      var array, key, project, setting;
      array = [];
      for (key in data) {
        setting = data[key];
        project = new Project(setting);
        array.push(project);
      }
      return array;
    };
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      listView = new ProjectsListView;
      return list = listView.list, filterEditorView = listView.filterEditorView, listView;
    });
    it("will list all projects", function() {
      listView.show(projects());
      return expect(list.find('li').length).toBe(2);
    });
    it("will add the correct icon to each project", function() {
      var icon1, icon2;
      listView.show(projects());
      icon1 = list.find('li[data-project-id="testproject1"]').find('.icon');
      icon2 = list.find('li[data-project-id="testproject2"]').find('.icon');
      expect(icon1.attr('class')).toContain('icon-chevron-right');
      return expect(icon2.attr('class')).toContain('icon-bug');
    });
    describe("When the text of the mini editor changes", function() {
      beforeEach(function() {
        listView.show(projects());
        return listView.isOnDom = function() {
          return true;
        };
      });
      it("will only list projects with the correct title", function() {
        filterEditorView.getModel().setText('title:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('title');
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
      it("will only list projects with the correct group", function() {
        filterEditorView.getModel().setText('group:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('group');
        expect(listView.getFilterQuery()).toBe('test');
        expect(list.find('li').length).toBe(1);
        return expect(list.find('li:eq(0)').find('.project-manager-list-group')).toHaveText('Test');
      });
      it("will only list projects with the correct template", function() {
        filterEditorView.getModel().setText('template:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('template');
        expect(listView.getFilterQuery()).toBe('test');
        return expect(list.find('li').length).toBe(1);
      });
      return it("will fall back to default filter key if it's not valid", function() {
        filterEditorView.getModel().setText('test:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe(listView.defaultFilterKey);
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
    });
    return describe("It sorts the projects in correct order", function() {
      it("sorts after title", function() {
        atom.config.set('project-manager.sortBy', 'title');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject1");
      });
      return it("sort after group", function() {
        atom.config.set('project-manager.sortBy', 'group');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject2");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NhcmFoLy5hdG9tL3BhY2thZ2VzL3Byb2plY3QtbWFuYWdlci9zcGVjL3Byb2plY3RzLWxpc3Qtdmlldy1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSw0QkFBQTs7QUFBQSxFQUFBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSwyQkFBUixDQUFuQixDQUFBOztBQUFBLEVBQ0EsT0FBQSxHQUFVLE9BQUEsQ0FBUSxnQkFBUixDQURWLENBQUE7O0FBQUEsRUFFQyxJQUFLLE9BQUEsQ0FBUSxzQkFBUixFQUFMLENBRkQsQ0FBQTs7QUFBQSxFQUlBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUEsR0FBQTtBQUNwQixRQUFBLHdFQUFBO0FBQUEsSUFBQSxPQUF1RCxFQUF2RCxFQUFDLGtCQUFELEVBQVcsMEJBQVgsRUFBNkIsY0FBN0IsRUFBbUMsMEJBQW5DLENBQUE7QUFBQSxJQUVBLElBQUEsR0FDRTtBQUFBLE1BQUEsWUFBQSxFQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssY0FBTDtBQUFBLFFBQ0EsS0FBQSxFQUFPLGdCQURQO0FBQUEsUUFFQSxLQUFBLEVBQU8sQ0FBQyxrQkFBRCxDQUZQO09BREY7QUFBQSxNQUlBLFlBQUEsRUFDRTtBQUFBLFFBQUEsR0FBQSxFQUFLLGNBQUw7QUFBQSxRQUNBLEtBQUEsRUFBTyxnQkFEUDtBQUFBLFFBRUEsS0FBQSxFQUFPLENBQUMsa0JBQUQsQ0FGUDtBQUFBLFFBR0EsUUFBQSxFQUFVLGVBSFY7QUFBQSxRQUlBLElBQUEsRUFBTSxVQUpOO0FBQUEsUUFLQSxLQUFBLEVBQU8sTUFMUDtPQUxGO0tBSEYsQ0FBQTtBQUFBLElBZUEsUUFBQSxHQUFXLFNBQUEsR0FBQTtBQUNULFVBQUEsNEJBQUE7QUFBQSxNQUFBLEtBQUEsR0FBUSxFQUFSLENBQUE7QUFDQSxXQUFBLFdBQUE7NEJBQUE7QUFDRSxRQUFBLE9BQUEsR0FBYyxJQUFBLE9BQUEsQ0FBUSxPQUFSLENBQWQsQ0FBQTtBQUFBLFFBQ0EsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYLENBREEsQ0FERjtBQUFBLE9BREE7QUFJQSxhQUFPLEtBQVAsQ0FMUztJQUFBLENBZlgsQ0FBQTtBQUFBLElBc0JBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLGdCQUFBLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBWCxDQUFtQixJQUFJLENBQUMsU0FBeEIsQ0FBbkIsQ0FBQTtBQUFBLE1BQ0EsUUFBQSxHQUFXLEdBQUEsQ0FBQSxnQkFEWCxDQUFBO2FBRUMsZ0JBQUEsSUFBRCxFQUFPLDRCQUFBLGdCQUFQLEVBQTJCLFNBSGxCO0lBQUEsQ0FBWCxDQXRCQSxDQUFBO0FBQUEsSUEyQkEsRUFBQSxDQUFHLHdCQUFILEVBQTZCLFNBQUEsR0FBQTtBQUMzQixNQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFBLENBQWQsQ0FBQSxDQUFBO2FBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixDQUFlLENBQUMsTUFBdkIsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxDQUFwQyxFQUYyQjtJQUFBLENBQTdCLENBM0JBLENBQUE7QUFBQSxJQStCQSxFQUFBLENBQUcsMkNBQUgsRUFBZ0QsU0FBQSxHQUFBO0FBQzlDLFVBQUEsWUFBQTtBQUFBLE1BQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxRQUFBLENBQUEsQ0FBZCxDQUFBLENBQUE7QUFBQSxNQUNBLEtBQUEsR0FBUSxJQUFJLENBQUMsSUFBTCxDQUFVLG9DQUFWLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsT0FBckQsQ0FEUixDQUFBO0FBQUEsTUFFQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxvQ0FBVixDQUErQyxDQUFDLElBQWhELENBQXFELE9BQXJELENBRlIsQ0FBQTtBQUFBLE1BR0EsTUFBQSxDQUFPLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBWCxDQUFQLENBQTJCLENBQUMsU0FBNUIsQ0FBc0Msb0JBQXRDLENBSEEsQ0FBQTthQUlBLE1BQUEsQ0FBTyxLQUFLLENBQUMsSUFBTixDQUFXLE9BQVgsQ0FBUCxDQUEyQixDQUFDLFNBQTVCLENBQXNDLFVBQXRDLEVBTDhDO0lBQUEsQ0FBaEQsQ0EvQkEsQ0FBQTtBQUFBLElBc0NBLFFBQUEsQ0FBUywwQ0FBVCxFQUFxRCxTQUFBLEdBQUE7QUFDbkQsTUFBQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsUUFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLFFBQUEsQ0FBQSxDQUFkLENBQUEsQ0FBQTtlQUNBLFFBQVEsQ0FBQyxPQUFULEdBQW1CLFNBQUEsR0FBQTtpQkFBRyxLQUFIO1FBQUEsRUFGVjtNQUFBLENBQVgsQ0FBQSxDQUFBO0FBQUEsTUFJQSxFQUFBLENBQUcsZ0RBQUgsRUFBcUQsU0FBQSxHQUFBO0FBQ25ELFFBQUEsZ0JBQWdCLENBQUMsUUFBakIsQ0FBQSxDQUEyQixDQUFDLE9BQTVCLENBQW9DLFNBQXBDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsUUFBUSxDQUFDLGFBQTdCLENBREEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLFFBQVEsQ0FBQyxZQUFULENBQUEsQ0FBUCxDQUErQixDQUFDLElBQWhDLENBQXFDLE9BQXJDLENBSEEsQ0FBQTtBQUFBLFFBSUEsTUFBQSxDQUFPLFFBQVEsQ0FBQyxjQUFULENBQUEsQ0FBUCxDQUFpQyxDQUFDLElBQWxDLENBQXVDLEdBQXZDLENBSkEsQ0FBQTtlQUtBLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsQ0FBZSxDQUFDLE1BQXZCLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsQ0FBcEMsRUFObUQ7TUFBQSxDQUFyRCxDQUpBLENBQUE7QUFBQSxNQVlBLEVBQUEsQ0FBRyxnREFBSCxFQUFxRCxTQUFBLEdBQUE7QUFDbkQsUUFBQSxnQkFBZ0IsQ0FBQyxRQUFqQixDQUFBLENBQTJCLENBQUMsT0FBNUIsQ0FBb0MsWUFBcEMsQ0FBQSxDQUFBO0FBQUEsUUFDQSxNQUFNLENBQUMsWUFBUCxDQUFvQixRQUFRLENBQUMsYUFBN0IsQ0FEQSxDQUFBO0FBQUEsUUFHQSxNQUFBLENBQU8sUUFBUSxDQUFDLFlBQVQsQ0FBQSxDQUFQLENBQStCLENBQUMsSUFBaEMsQ0FBcUMsT0FBckMsQ0FIQSxDQUFBO0FBQUEsUUFJQSxNQUFBLENBQU8sUUFBUSxDQUFDLGNBQVQsQ0FBQSxDQUFQLENBQWlDLENBQUMsSUFBbEMsQ0FBdUMsTUFBdkMsQ0FKQSxDQUFBO0FBQUEsUUFLQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLENBQXBDLENBTEEsQ0FBQTtlQU1BLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFVBQVYsQ0FDTCxDQUFDLElBREksQ0FDQyw2QkFERCxDQUFQLENBQ3VDLENBQUMsVUFEeEMsQ0FDbUQsTUFEbkQsRUFQbUQ7TUFBQSxDQUFyRCxDQVpBLENBQUE7QUFBQSxNQXNCQSxFQUFBLENBQUcsbURBQUgsRUFBd0QsU0FBQSxHQUFBO0FBQ3RELFFBQUEsZ0JBQWdCLENBQUMsUUFBakIsQ0FBQSxDQUEyQixDQUFDLE9BQTVCLENBQW9DLGVBQXBDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsUUFBUSxDQUFDLGFBQTdCLENBREEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLFFBQVEsQ0FBQyxZQUFULENBQUEsQ0FBUCxDQUErQixDQUFDLElBQWhDLENBQXFDLFVBQXJDLENBSEEsQ0FBQTtBQUFBLFFBSUEsTUFBQSxDQUFPLFFBQVEsQ0FBQyxjQUFULENBQUEsQ0FBUCxDQUFpQyxDQUFDLElBQWxDLENBQXVDLE1BQXZDLENBSkEsQ0FBQTtlQUtBLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsQ0FBZSxDQUFDLE1BQXZCLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsQ0FBcEMsRUFOc0Q7TUFBQSxDQUF4RCxDQXRCQSxDQUFBO2FBOEJBLEVBQUEsQ0FBRyx3REFBSCxFQUE2RCxTQUFBLEdBQUE7QUFDM0QsUUFBQSxnQkFBZ0IsQ0FBQyxRQUFqQixDQUFBLENBQTJCLENBQUMsT0FBNUIsQ0FBb0MsUUFBcEMsQ0FBQSxDQUFBO0FBQUEsUUFDQSxNQUFNLENBQUMsWUFBUCxDQUFvQixRQUFRLENBQUMsYUFBN0IsQ0FEQSxDQUFBO0FBQUEsUUFHQSxNQUFBLENBQU8sUUFBUSxDQUFDLFlBQVQsQ0FBQSxDQUFQLENBQStCLENBQUMsSUFBaEMsQ0FBcUMsUUFBUSxDQUFDLGdCQUE5QyxDQUhBLENBQUE7QUFBQSxRQUlBLE1BQUEsQ0FBTyxRQUFRLENBQUMsY0FBVCxDQUFBLENBQVAsQ0FBaUMsQ0FBQyxJQUFsQyxDQUF1QyxHQUF2QyxDQUpBLENBQUE7ZUFLQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLENBQXBDLEVBTjJEO01BQUEsQ0FBN0QsRUEvQm1EO0lBQUEsQ0FBckQsQ0F0Q0EsQ0FBQTtXQTZFQSxRQUFBLENBQVMsd0NBQVQsRUFBbUQsU0FBQSxHQUFBO0FBQ2pELE1BQUEsRUFBQSxDQUFHLG1CQUFILEVBQXdCLFNBQUEsR0FBQTtBQUN0QixRQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQix3QkFBaEIsRUFBMEMsT0FBMUMsQ0FBQSxDQUFBO0FBQUEsUUFDQSxRQUFRLENBQUMsSUFBVCxDQUFjLFFBQUEsQ0FBQSxDQUFkLENBREEsQ0FBQTtlQUVBLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFVBQVYsQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixXQUEzQixDQUFQLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsY0FBckQsRUFIc0I7TUFBQSxDQUF4QixDQUFBLENBQUE7YUFLQSxFQUFBLENBQUcsa0JBQUgsRUFBdUIsU0FBQSxHQUFBO0FBQ3JCLFFBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLHdCQUFoQixFQUEwQyxPQUExQyxDQUFBLENBQUE7QUFBQSxRQUNBLFFBQVEsQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFBLENBQWQsQ0FEQSxDQUFBO2VBRUEsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsVUFBVixDQUFxQixDQUFDLElBQXRCLENBQTJCLFdBQTNCLENBQVAsQ0FBK0MsQ0FBQyxJQUFoRCxDQUFxRCxjQUFyRCxFQUhxQjtNQUFBLENBQXZCLEVBTmlEO0lBQUEsQ0FBbkQsRUE5RW9CO0VBQUEsQ0FBdEIsQ0FKQSxDQUFBO0FBQUEiCn0=

//# sourceURL=/Users/sarah/.atom/packages/project-manager/spec/projects-list-view-spec.coffee
