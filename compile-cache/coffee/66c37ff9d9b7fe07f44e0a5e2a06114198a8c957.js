(function() {
  var HEADING_REGEX, JumpTo, REFERENCE_REGEX, TABLE_COL_REGEX, utils;

  utils = require("../utils");

  HEADING_REGEX = /^\#{1,6} +.+$/;

  REFERENCE_REGEX = /\[?([^\s\]]+)(?:\]|\]:)?/;

  TABLE_COL_REGEX = /([^\|]*?)\s*\|/;

  module.exports = JumpTo = (function() {
    function JumpTo(command) {
      this.command = command;
      this.editor = atom.workspace.getActiveTextEditor();
      this.cursor = this.editor.getCursorBufferPosition();
    }

    JumpTo.prototype.trigger = function(e) {
      var fn, range;
      fn = this.command.replace(/-[a-z]/ig, function(s) {
        return s[1].toUpperCase();
      });
      range = this[fn]();
      if (range) {
        return this.editor.setCursorBufferPosition(range);
      } else {
        return e.abortKeyBinding();
      }
    };

    JumpTo.prototype.previousHeading = function() {
      var found, range;
      range = [[0, 0], [this.cursor.row - 1, 0]];
      found = false;
      this.editor.buffer.backwardsScanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.nextHeading = function() {
      var eof, range;
      eof = this.editor.getEofBufferPosition();
      range = this._findNextHeading([[this.cursor.row + 1, 0], [eof.row + 1, 0]]) || this._findNextHeading([[0, 0], [eof.row + 1, 0]]);
      return range;
    };

    JumpTo.prototype._findNextHeading = function(range) {
      var found;
      found = false;
      this.editor.buffer.scanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.referenceDefinition = function() {
      var found, key;
      key = this.editor.getSelectedText() || this.editor.getWordUnderCursor();
      if (!key) {
        return false;
      }
      key = utils.regexpEscape(REFERENCE_REGEX.exec(key)[1]);
      found = false;
      this.editor.buffer.scan(RegExp("\\[" + key + "\\]", "g"), (function(_this) {
        return function(match) {
          var end;
          end = match.range.end;
          if (end.row !== _this.cursor.row) {
            found = [end.row, end.column - 1];
            return match.stop();
          }
        };
      })(this));
      return found;
    };

    JumpTo.prototype.nextTableCell = function() {
      var line;
      line = this.editor.lineTextForBufferRow(this.cursor.row);
      if (utils.isTableRow(line) || utils.isTableSeparator(line)) {
        return this._findNextTableCell(line, this.cursor.row, this.cursor.column);
      } else {
        return false;
      }
    };

    JumpTo.prototype._findNextTableCell = function(currentLine, row, column) {
      var td;
      column = currentLine.indexOf("|", column);
      if (column === -1 || column === currentLine.length - 1) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (utils.isTableSeparator(currentLine)) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (currentLine === void 0) {
        return false;
      }
      if (currentLine[column] === "|") {
        column += 1;
        currentLine = currentLine.slice(column);
      }
      if (td = TABLE_COL_REGEX.exec(currentLine)) {
        return [row, column + td[1].length];
      } else {
        return [row, column + currentLine.length];
      }
    };

    return JumpTo;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NhcmFoLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9saWIvY29tbWFuZHMvanVtcC10by5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsOERBQUE7O0FBQUEsRUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLFVBQVIsQ0FBUixDQUFBOztBQUFBLEVBRUEsYUFBQSxHQUFrQixlQUZsQixDQUFBOztBQUFBLEVBR0EsZUFBQSxHQUFrQiwwQkFIbEIsQ0FBQTs7QUFBQSxFQUlBLGVBQUEsR0FBa0IsZ0JBSmxCLENBQUE7O0FBQUEsRUFNQSxNQUFNLENBQUMsT0FBUCxHQUNNO0FBQ1MsSUFBQSxnQkFBQyxPQUFELEdBQUE7QUFDWCxNQUFBLElBQUMsQ0FBQSxPQUFELEdBQVcsT0FBWCxDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQWYsQ0FBQSxDQURWLENBQUE7QUFBQSxNQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyx1QkFBUixDQUFBLENBRlYsQ0FEVztJQUFBLENBQWI7O0FBQUEscUJBS0EsT0FBQSxHQUFTLFNBQUMsQ0FBRCxHQUFBO0FBQ1AsVUFBQSxTQUFBO0FBQUEsTUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLE9BQU8sQ0FBQyxPQUFULENBQWlCLFVBQWpCLEVBQTZCLFNBQUMsQ0FBRCxHQUFBO2VBQU8sQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLFdBQUwsQ0FBQSxFQUFQO01BQUEsQ0FBN0IsQ0FBTCxDQUFBO0FBQUEsTUFDQSxLQUFBLEdBQVEsSUFBRSxDQUFBLEVBQUEsQ0FBRixDQUFBLENBRFIsQ0FBQTtBQUdBLE1BQUEsSUFBRyxLQUFIO2VBQ0UsSUFBQyxDQUFBLE1BQU0sQ0FBQyx1QkFBUixD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

//# sourceURL=/Users/sarah/.atom/packages/markdown-writer/lib/commands/jump-to.coffee
