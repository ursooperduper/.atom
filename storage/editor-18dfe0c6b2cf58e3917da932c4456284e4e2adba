{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1440,"height":900,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/sarah/tidepool/blip"],"buffers":[{"text":"/**\n * Copyright (c) 2014, Tidepool Project\n * \n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n * \n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n\nmodule.exports = require('./navbar');","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":219,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/components/navbar/index.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"78e09f4a0601953183dc5491dd278c4bb2f76be7","deserializer":"TextBuffer"},{"text":"/** @jsx React.DOM */\n/**\n * Copyright (c) 2014, Tidepool Project\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n *\n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n\nvar React = require('react');\nvar _ = require('lodash');\nvar cx = require('react/lib/cx');\n\nvar personUtils = require('../../core/personutils');\nvar NavbarPatientCard = require('../../components/navbarpatientcard');\n\nvar logoSrc = require('./images/blip-logo-80x80.png');\n\nvar Navbar = React.createClass({\n  propTypes: {\n    currentPage: React.PropTypes.string,\n    user: React.PropTypes.object,\n    fetchingUser: React.PropTypes.bool,\n    patient: React.PropTypes.object,\n    fetchingPatient: React.PropTypes.bool,\n    getUploadUrl: React.PropTypes.func,\n    onLogout: React.PropTypes.func,\n    trackMetric: React.PropTypes.func.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n      showDropdown: false\n    };\n  },\n\n  render: function() {\n    return (\n      <div className=\"Navbar\">\n        {this.renderLogoSection()}\n        {this.renderPatientSection()}\n        {this.renderMenuSection()}\n      </div>\n    );\n  },\n\n  renderLogoSection: function() {\n    return (\n      <div className=\"Navbar-logoSection\">\n        {this.renderLogo()}\n      </div>\n    );\n  },\n\n  renderLogo: function() {\n    var self = this;\n    var handleClick = function() {\n      self.props.trackMetric('Clicked Navbar Logo');\n    };\n\n    return (\n      <a\n        href=\"#/\"\n        className=\"Navbar-logo\"\n        onClick={handleClick}>\n      </a>\n    );\n  },\n\n  getPatientLink: function(patient) {\n    if (!patient || !patient.userid) {\n      return '';\n    }\n\n    return '#/patients/' + patient.userid + '/data';\n  },\n\n  renderPatientSection: function() {\n    var patient = this.props.patient;\n\n    if (_.isEmpty(patient)) {\n      return <div className=\"Navbar-patientSection\"></div>;\n    }\n\n    patient.link = this.getPatientLink(patient);\n\n    var displayName = this.getPatientDisplayName();\n    var patientUrl = this.getPatientUrl();\n    var uploadLink = this.renderUploadLink();\n    var shareLink = this.renderShareLink();\n    var self = this;\n\n    return (\n      <div className=\"Navbar-patientSection\" ref=\"patient\">\n        <NavbarPatientCard\n          href={patient.link}\n          currentPage={this.props.currentPage}\n          uploadUrl={this.props.getUploadUrl()}\n          patient={patient}\n          trackMetric={this.props.trackMetric} />\n      </div>\n    );\n  },\n\n  renderUploadLink: function() {\n    var noLink = <div className=\"Navbar-uploadButton\"></div>;\n\n    if (!this.isSamePersonUserAndPatient()) {\n      return noLink;\n    }\n\n    var uploadUrl = this.props.getUploadUrl();\n    if (!uploadUrl) {\n      return noLink;\n    }\n\n    var self = this;\n    var handleClick = function(e) {\n      if (e) {\n        e.preventDefault();\n      }\n      window.open(uploadUrl, '_blank');\n      self.props.trackMetric('Clicked Navbar Upload Data');\n    };\n\n    return (\n      <a href=\"\" onClick={handleClick} className=\"Navbar-button Navbar-button--patient Navbar-button--blue Navbar-uploadButton\">\n        <i className=\"Navbar-icon icon-upload-data\"></i>\n        <span className=\"Navbar-uploadLabel\">Upload</span>\n      </a>\n    );\n  },\n\n  renderShareLink: function() {\n    var noLink = <div className=\"Navbar-shareButton\"></div>;\n    var self = this;\n\n    if (!this.isSamePersonUserAndPatient()) {\n      return noLink;\n    }\n\n    var patientUrl = this.getPatientUrl();\n\n    var handleClick = function() {\n      self.props.trackMetric('Clicked Navbar Share');\n    };\n\n    return (\n      <a href={patientUrl} onClick={handleClick} className=\"Navbar-button Navbar-button--patient Navbar-button--blue Navbar-uploadButton\">\n        <i className=\"Navbar-icon icon-share-data\"></i>\n        <span className=\"Navbar-shareLabel\">Share</span>\n      </a>\n    );\n  },\n\n  toggleDropdown: function(e) {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this.setState({showDropdown: !this.state.showDropdown});\n  },\n\n  stopPropagation: function(e) {\n    e.stopPropagation();\n  },\n\n  hideDropdown: function()  {\n    if (this.state.showDropdown) {\n      this.setState({showDropdown: false});\n    }\n  },\n\n  renderMenuSection: function() {\n    var user = this.props.user;\n\n    if (_.isEmpty(user)) {\n      return <div className=\"Navbar-menuSection\"></div>;\n    }\n\n    var displayName = this.getUserDisplayName();\n    var self = this;\n    var handleClickUser = function() {\n      self.props.trackMetric('Clicked Navbar Logged In User');\n      self.setState({showDropdown: false});\n    };\n\n    var handleCareteam = function() {\n      self.props.trackMetric('Clicked Navbar CareTeam');\n    };\n\n    var patientsClasses = cx({\n      'Navbar-button': true,\n      'Navbar-selected': this.props.currentPage && this.props.currentPage === 'patients'\n    });\n\n    var accountSettingsClasses = cx({\n      'Navbar-button': true,\n      'Navbar-dropdownIcon-show': this.props.currentPage && this.props.currentPage === 'profile'\n    });\n\n    var dropdownClasses = cx({\n      'Navbar-menuDropdown': true,\n      'Navbar-menuDropdown-hide': !self.state.showDropdown\n    });\n\n    var dropdownIconClasses = cx({\n      'Navbar-dropdownIcon': true,\n      'Navbar-dropdownIcon-show': self.state.showDropdown,\n      'Navbar-dropdownIcon-current': this.props.currentPage && this.props.currentPage === 'profile'\n    });\n\n    var dropdownIconIClasses = cx({\n      'Navbar-icon': true,\n      'icon-account--down': !self.state.showDropdown,\n      'icon-account--up': self.state.showDropdown\n    });\n\n    return (\n      <ul className=\"Navbar-menuSection\" ref=\"user\">\n        <li className=\"Navbar-menuItem\">\n          <a href=\"#/patients\" title=\"Care Team\" onClick={handleCareteam} className={patientsClasses} ref=\"careteam\"><i className=\"Navbar-icon icon-careteam\"></i></a>\n        </li>\n        <li className={dropdownIconClasses}>\n          <div onClick={this.toggleDropdown}>\n            <i className='Navbar-icon Navbar-icon-profile icon-profile'></i>\n            <div className=\"Navbar-logged\">\n              <span className=\"Navbar-loggedInAs\">{'Logged in as '}</span>\n              <span className=\"Navbar-userName\" ref=\"userFullName\" title={displayName}>{displayName}</span>\n            </div>\n            <i className='Navbar-icon Navbar-icon-down icon-arrow-down'></i>\n            <div className='clear'></div>\n          </div>\n          <div onClick={this.stopPropagation} className={dropdownClasses}>\n            <ul>\n              <li>\n                <a href=\"#/profile\" title=\"Account\" onClick={handleClickUser} className={accountSettingsClasses}>\n                  <i className='Navbar-icon icon-settings'></i><span className=\"Navbar-menuText\">Account Settings</span>\n                </a>\n              </li>\n              <li>\n                <a href=\"\" title=\"Logout\" onClick={this.handleLogout} className=\"Navbar-button\" ref=\"logout\">\n                  <i className='Navbar-icon icon-logout'></i><span className=\"Navbar-menuText\">Logout</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </li>\n      </ul>\n    );\n  },\n\n  getUserDisplayName: function() {\n    return personUtils.fullName(this.props.user);\n  },\n\n  getPatientDisplayName: function() {\n    return personUtils.patientFullName(this.props.patient);\n  },\n\n  getPatientUrl: function() {\n    var patient = this.props.patient;\n    if (!patient) {\n      return;\n    }\n    return '#/patients/' + patient.userid;\n  },\n\n  isSamePersonUserAndPatient: function() {\n    return personUtils.isSame(this.props.user, this.props.patient);\n  },\n\n  handleLogout: function(e) {\n    this.setState({showDropdown: false});\n\n    if (e) {\n      e.preventDefault();\n    }\n\n    var logout = this.props.onLogout;\n    if (logout) {\n      logout();\n    }\n  }\n});\n\nmodule.exports = Navbar;\n","markers":{"markers":{"1":{"id":1,"range":[[190,8],[190,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":227,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"123":{"id":123,"range":[[49,0],[49,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"182":{"id":182,"range":[[49,0],[49,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"183":{"id":183,"range":[[217,0],[218,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"778":{"id":778,"range":[[241,23],[241,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"779":{"id":779,"range":[[241,44],[241,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"786":{"id":786,"range":[[49,0],[49,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/components/navbar/navbar.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f188a11bef020a5493a05ea78d516cb435bd435b","deserializer":"TextBuffer"},{"text":"/**\n * Copyright (c) 2014, Tidepool Project\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n *\n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n\n// Layout\n// ====================================\n\n@Navbar-height: 60px;\n\n.Navbar {\n  display: flex;\n}\n\n@Navbar-logoHeight: 40px;\n\n.Navbar-logoSection {\n  width: @Navbar-logoHeight;\n}\n\n.Navbar-menuSection {\n  // Magic number width: should contain whole menu,\n  // and put some space between menu an patient section\n  width: 330px;\n  \n  padding: 0;\n  // Align child items to the right (flex-end)\n  // and to the top (default)\n  display: flex;\n  justify-content: flex-end;\n}\n\n.Navbar-patientSection {\n  // Use remaining space\n  flex-grow: 1;\n\n  // Align child items to the right (flex-end)\n  // and center vertically\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  .patientcard {\n    padding: 0px;\n\n    .icon-face-standin {\n      color: @gray-darker;\n    }\n  }\n}\n\n// Logo section\n// ====================================\n\n.Navbar-logo {\n  display: block;\n  background-image: url('images/blip-logo-80x80.png');\n  background-repeat: no-repeat;\n  background-size: @Navbar-logoHeight;\n  height: @Navbar-logoHeight;\n}\n\n@Navbar-versionHeight: (@Navbar-height - @Navbar-logoHeight);\n\n.Navbar-version {\n  font-size: 12px;\n  line-height: @Navbar-versionHeight;\n  height: @Navbar-versionHeight;\n  text-align: center;\n  color: @gray-dark;\n}\n\n// Buttons, icons, labels\n// ====================================\n\n@Navbar-iconSize: 28px;\n\n.Navbar-icon {\n  width: @Navbar-iconSize;\n  font-size: 20px;\n  vertical-align: middle;\n}\n\n@Navbar-buttonHeight: 20px;\n\n.Navbar-button {\n  font-size: 14px;\n  line-height: @Navbar-buttonHeight;\n  height: @Navbar-buttonHeight;\n\n  color: @gray-dark;\n  text-decoration: none;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: @blue-green-light;\n    text-decoration: none;\n  }\n}\n\n.Navbar-button--withLeftLabelAndArrow {\n  // No idea why, but this makes the button keep correct height\n  display: flex;\n  margin-right: 8px;\n}\n\n.Navbar-logged {\n  font-size: 14px;\n  float: left;\n  padding: 0px 5px;\n}\n\n.Navbar-label {\n  color: @gray-dark;\n\n  .Navbar-button--blueBg:hover &,\n  .Navbar-button--blueBg:focus &,\n  .Navbar-button--blueBg:active & {\n    background-color: @blue-green-light;\n  }\n}\n\n.Navbar-button--patient {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n\n.Navbar-label--left {\n  padding-left: 20px;\n  padding-right: 5px;\n}\n\n// http://cssarrowplease.com/\n.Navbar-label--left.Navbar-label--withArrow {\n  position: relative;\n  margin-right: @Navbar-buttonHeight/2;\n\n  &:after {\n  \tleft: 100%;\n  \ttop: 50%;\n  \tborder: solid transparent;\n  \tcontent: \" \";\n  \theight: 0;\n  \twidth: 0;\n  \tposition: absolute;\n  \tpointer-events: none;\n\t  border-left-color: @gray-dark;\n  \tborder-width: @Navbar-buttonHeight/2;\n  \tmargin-top: -@Navbar-buttonHeight/2;\n  }\n\n  .Navbar-button:hover &:after,\n  .Navbar-button:focus &:after,\n  .Navbar-button:active &:after {\n    background-color: @blue-green-light;\n  }\n\n  .Navbar-button--blueBg:hover  &:after,\n  .Navbar-button--blueBg:focus  &:after,\n  .Navbar-button--blueBg:active  &:after {\n    border-left-color: @blue-green-light;\n  }\n}\n\n.Navbar-button--blueBg {\n  .Navbar-label {\n    background-color: @blue-green;\n  }\n  .Navbar-label--left.Navbar-label--withArrow {\n    &:after {\n      border-left-color: @blue-green;\n    }\n  }\n}\n\n.Navbar-button--blue {\n  color: @blue-green;\n  text-decoration: none;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: @blue-green-light;\n    text-decoration: none;\n  }\n}\n\n// Menu section\n// ====================================\n\n.Navbar-menuSection {\n  list-style: none;\n  vertical-align: top;\n}\n\n\n.Navbar-loggedInAs {\n  // Everything inside the label needs to have\n  // so it aligns correctly with the text that has \"overflow ellipsis\"\n  // Note: setting \"max-width\" triggers the ellipsis\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  margin-right: 5px;\n}\n\n.Navbar-userName {\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 140px;\n}\n\n.Navbar-menuItem {\n  &:hover,\n  &:focus,\n  &:active {\n    color: @blue-green-light;\n  }\n}\n\n.Navbar-menuItem .Navbar-icon {\n  padding-left: 2px;\n  vertical-align: top;\n}\n\n// Patient section\n// ====================================\n\n.Navbar-patientName {\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  max-width: 180px;\n}\n\n@Navbar-patientPictureSize: 60px;\n\n.Navbar-patientPicture {\n  background-image: url('images/profile-120x120.png');\n  background-repeat: no-repeat;\n  background-size: @Navbar-patientPictureSize;\n  width: @Navbar-patientPictureSize;\n  height: @Navbar-patientPictureSize;\n}\n\n.Navbar-uploadButton {\n  margin-left: 5px;\n\n  // Magic number: when upload button is hidden, keep layout of items\n  // Set this to whatever the width is of the icon + \"Upload data\" label\n  min-width: 112px;\n}\n\n.Navbar-uploadLabel {\n  display: inline-block;\n  margin-left: 5px;\n}\n\n.Navbar-selected {\n  > .Navbar-icon {\n    color: @blue-green;\n\n    &:hover,\n    &:focus,\n    &:active {\n      color: @blue-green;\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: @blue-green;\n  }\n\n  .Navbar-logged {\n    color: @blue-green;\n\n    &:hover,\n    &:focus,\n    &:active {\n      color: @blue-green;\n    }\n  }\n}\n\n.patientcard-actions--highlight > .patientcard-icon {\n  color: @blue-green;\n}\n\n.patientcard-icon {\n  color: @gray-dark;\n  font-size: 14px;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: @gray-darkest;\n  }\n}\n\n.patientcard-icon--highlight:hover {\n  color: @blue-green-light;\n}\n\n.Navbar-menuDropdown {\n  border: 1px solid @gray-light;\n  cursor: default;\n  position: absolute;\n  background: white;\n  right: 0px;\n  z-index: 100;\n  width: 200px;\n  top: 25px;\n\n  > ul {\n    list-style: none;\n    padding: 0 10px;\n\n    > li {\n      padding: 10px 0;\n    }\n\n    > li:last-child {\n      padding-top: 0px;\n      padding-bottom: 10px;\n    }\n  }\n}\n\n.Navbar-menuDropdown:after,\n.Navbar-menuDropdown:before {\n\tposition: absolute;\n  top: -8px;\n  right: 14px;\n  display: inline-block;\n  border: solid transparent;\n  border-right: 7px solid transparent;\n  border-bottom: 7px solid #eee;\n  border-left: 7px solid transparent;\n  border-bottom-color: white;\n  content: '';\n  height: 0;\n  width: 0;\n}\n\n.Navbar-menuDropdown:before {\n  top: -14px;\n  border-color: rgba(230, 230, 229, 0);\n  border-bottom-color: @gray-light;\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.Navbar-dropdownIcon {\n  position: relative;\n}\n\n.Navbar-menuDropdown-title {\n  border-bottom: 1px solid rgb(218, 218, 218);\n  padding: 10px 0;\n  font-size: 14px;\n  color: @gray-darker;\n  text-decoration: none;\n}\n\n.Navbar-menuDropdown-hide {\n  display: none;\n}\n\n.Navbar-dropdownIcon-show {\n  color: @blue-green-light;\n}\n\n.Navbar-dropdownIcon {\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: @blue-green-light;\n  }\n}\n\n.Navbar-dropdownIcon-current {\n  color: @blue-green;\n}\n\n.Navbar-icon-down {\n  font-size: 5px;\n  float: left;\n}\n\n.Navbar-icon-profile {\n  float: left;\n}\n\n.Navbar-menuText {\n  padding-left: @spacing-tiny;\n}\n","markers":{"markers":{"1":{"id":1,"range":[[384,0],[384,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":255,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/components/navbar/navbar.less","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"11e41c735006f7978ecd84e5df5851a94d298077","deserializer":"TextBuffer"},{"text":"# Blip\n\n[![Build Status](https://travis-ci.org/tidepool-org/blip.png?branch=master)](https://travis-ci.org/tidepool-org/blip)\n\nBlip is a web app for Type-1 Diabetes (T1D) built on top of the [Tidepool](http://tidepool.org/) platform. It allows patients and their \"care team\" (family, doctors) to visualize their device data and message each other.\n\nTech stack:\n\n- [React](http://facebook.github.io/react)\n- [LESS](http://lesscss.org/)\n- [D3.js](http://d3js.org/)\n\nTable of contents:\n\n- [Install](#install)\n- [Quick start](#quick-start)\n- [Config](#config)\n- [Development](#development)\n    - [Code organization](#code-organization)\n    - [React components](#react-components)\n    - [Webpack](#webpack)\n    - [Config object](#config-object)\n    - [Dependencies](#dependencies)\n    - [Debugging](#debugging)\n    - [Less](#less)\n    - [Icons](#icons)\n    - [JSHint](#jshint)\n    - [Mock mode](#mock-mode)\n    - [Perceived speed](#perceived-speed)\n- [Testing](#testing)\n- [Build and deployment](#build-and-deployment)\n- [Running locally](#running-local)\n\n## Install\n\nRequirements:\n\n- [Node.js](http://nodejs.org/)\n\nClone this repo then install dependencies:\n\n```bash\n$ npm install\n```\n\n## Quick start\n\nStart the development server (in \"mock mode\") with:\n\n```bash\n$ source config/mock.sh\n$ npm start\n```\n\nOpen your web browser and navigate to `http://localhost:3000/`. You can see the\nmock data by logging in with email \"**demo**\" and password \"**demo**\".\n\n## Config\n\nConfiguration values are set with environment variables (see `config/sample.sh`).\n\nYou can set environment variables manually, or use a bash script. For example:\n\n```bash\nsource config/devel.sh\n```\n\nAsk the project owners to provide you with config scripts for different environments, or you can create one of your own. It is recommended to put them in the `config/` directory, where they will be ignored by Git.\n\n## Development\n\nThe following snippets of documentation should help you find your way around and contribute to the app's code.\n\n### Code organization\n\n- **App** (`app/app.js`): Expose a global `window.app` object where everything else is attached; create the main React component `app.component`\n- **Router** (`app/router.js`): Handle client-side URI routing (using [director](https://github.com/flatiron/director)); attached to the global `app` object\n- **Core** (`app/core`): Scripts and styles shared by all app components\n- **Components** (`app/components`): Reusable React components, the building-blocks of the application\n- **Pages** (`app/pages`): Higher-level React components that combine reusable components together; switch from page to page on route change\n- **Services** (`app/core/<service>.js`): Singletons used to interface with external services or to provide some common utility; they are attached to the global `app` object (for example, `app.api` which handles communicating with the backend)\n\n### React components\n\nWhen writing [React](http://facebook.github.io/react) components, try to follow the following guidelines:\n\n- Keep components small. If a component gets too big, it might be worth splitting it out into smaller pieces.\n- Keep state to a minimum. A component without anything in `state` and only `props` would be best. When state is needed, make sure nothing is reduntant and can be derived from other state values. Move state upstream (to parent components) as much as it makes sense.\n- Use the `propTypes` attribute to document what props the component expects\n\nSee [\"Writing good React components\"](http://blog.whn.se/post/69621609605/writing-good-react-components).\n\nMore on state:\n- The main `AppComponent` holds all of the state global to the app (like if the user is logged in or not)\n- Each page (`app/pages`) can hold some state specific to that page\n- Reusable components (`app/components`) typically hold no state (with rare exceptions, like forms)\n\n### Webpack\n\nWe use [Webpack](http://webpack.github.io/) to package all source files into a bundle that can be distributed to the user's browser. We also use CommonJS to import any module or asset.\n\nRequire a JavaScript file, npm package, or JSON file like you would normally in Node:\n\n```javascript\n// app.js\nvar foo = require('./foo');\nvar React = require('react');\nvar pkg = require('../package.json');\n```\n\nYou can also require a Less file, which will be added to the page as a `<style>` tag:\n\n```javascript\n// app.js\nrequire('./style.less');\n```\n\nTo use an image, the require statement will either return the URL to the image, or encode it directly as a string (depending on its size). Both are suitable for `src` or `href` attributes.\n\n```javascript\n// avatar.js\nvar imgSrc = require('./default-avatar.png');\n\nvar html = '<img src=\"' + imgSrc + '\" />';\n```\n\nAssets, like fonts, can also be required in Less files (Webpack will apply the same logic described above for images in JS files):\n\n```less\n@font-face {\n  font-family: 'Blip Icons';\n  src: url('../fonts/blip-icons.eot');\n}\n```\n\n### Config object\n\nThe `config.app.js` file will have its `process.env.FOO` statements replaced by the value of the corresponding environment variable when the build or development server is run. This is done thanks to [envify](https://github.com/hughsk/envify).\n\n### Dependencies\n\nAll third-party dependencies are installed through npm, and need to be `require`able through the CommonJS format.\n\nIf a dependency is needed directly in the app, by the build step, or by the production server, it should go in `dependencies` in the `package.json`. This is because we use `npm install --production` when deploying.\n\nAll other dependencies used in development (testing, development server, etc.), can go in the `devDependencies`.\n\n### Debugging\n\nThe app uses the [bows](http://latentflip.com/bows/) library to log debugging messages to the browser's console. It is disabled by default (which makes it production-friendly). To see the messages type `localStorage.debug = true` in the browser console and refresh the page. Create a logger for a particular app module by giving it a name, such as:\n\n```javascript\napp.foo = {\n  log: bows('Foo'),\n  bar: function() {\n    this.log('Walked into bar');\n  }\n};\n```\n\n### Less\n\nPrefix all CSS classes with the component name. For example, if I'm working on the `PatientList` component, I'll prefix CSS classes with `patient-list-`.\n\nKeep styles in the same folder as the component, and import them in the main `app/style.less` stylesheet. If working on a \"core\" style, don't forget to import the files in `app/core/core.less`.\n\nIn organizing the core styles in different `.less` files, as well as naming core style classes, we more or less take inspiration from Twitter Bootstrap (see [https://github.com/twbs/bootstrap/tree/master/less](https://github.com/twbs/bootstrap/tree/master/less)).\n\nSome styles we'd rather not use on touch screens (for example hover effects which can be annoying while scrolling on touch screens). For that purpose, a small snippet (`app/core/notouch.js`) will add the `.no-touch` class to the root document element, so you can use:\n\n```less\n.no-touch .list-item:hover {\n  // This will not be used on touch screens\n  background-color: #ccc;\n}\n```\n\nKeep all elements and styles **responsive**, i.e. make sure they look good on any screen size. For media queries, we like to use the mobile-first approach, i.e. define styles for all screen sizes first, then override for bigger screen sizes. For example:\n\n```less\n.container {\n  // On mobile and up, fill whole screen\n  width: 100%;\n\n  @media(min-width: 1024px) {\n    // When screen gets big enough, switch to fixed-width\n    width: 1024px;\n    margin-right: auto;\n    margin-left: auto;\n  }\n}\n```\n\nIf using class names to select elements from JavaScript (for tests, or using jQuery), prefix them with `js-`. That way style changes and script changes can be done more independently.\n\n### Icons\n\nWe use an icon font for app icons (in `app/core/fonts/`). To use an icon, simply add the correct class to an element (convention is to use the `<i>` element), for example:\n\n```html\n<i class=\"icon-logout\"></i>\n```\n\nTake a look at the `app/core/less/icons.less` file for available icons.\n\n### JSHint\n\nIn a separate terminal, you can lint JS files with:\n\n```bash\n$ npm run jshint\n```\n\nYou can also watch files and re-run JSHint on changes with:\n\n```bash\n$ npm run jshint-watch\n```\n\n### Mock mode\n\nFor local development, demoing, or testing, you can run the app in \"mock\" mode by setting the environment variable `MOCK=true` (to turn it off use `MOCK=''`). In this mode, the app will not make any calls to external services, and use dummy data contained in `.json` files.\n\nAll app objects (mostly app services) that make any external call should have their methods making these external calls patched by a mock. These are located in the `mock/` directory. To create one, return a `patchService(service)` function (see existing mocks for examples).\n\nMock data is generated from `.json` files, which are combined into a JavaScript object that mirrors the directory structure of the data files (for example `patients/11.json` will be available at `data.patients['11']`). See the [blip-mock-data](https://github.com/tidepool-org/blip-mock-data) repository for more details.\n\nYou can configure the behavior of mock services using **mock parameters**. These are passed through the URL query string.\n\nNote that because of the way URLs work, the query parameters MUST be before the '#'.\n\nFor example:\n\n```\nhttp://localhost:3000/?auth.skip=11&api.patient.getall.delay=2000#/patients\n```\n\nWith the URL above, mock services will receive the parameters:\n\n```javascript\n{\n  'auth.skip': 11,\n  'api.patient.getall.delay': 2000\n}\n```\n\nMock parameters are very useful in development (for example, you don't necessarily want to sign in every time you refresh). They are helpful when testing (manually or automatically) different behaviors: What happens if this API call returns an empty list? What is displayed while we are waiting for data to come back from the server? Etc.\n\nTo find out which mock parameters are available, please see the corresponding service and method in the `mock/` folder (look for calls to `getParam()`).\n\nThe naming convention for these parameters is **all lower-case**, and **name-spaced with periods**. For example, to have the call to `api.patient.getAll()` return an empty list, I would use the name `api.patient.getall.empty`.\n\nIf you would like to build the app with mock parameters \"baked-in\", you can also use the `MOCK_PARAMS` environement variable, which works like a query string (ex: `$ export MOCK_PARAMS='auth.skip=11&api.delay=1000'`). If the same parameter is set in the URL and the environment variable, the URL's value will be used.\n\n### Perceived speed\n\nFetching data from the server and rendering the UI to display that data is a classic pattern. The approach we try to follow (see [The Need for Speed](https://cloudup.com/blog/the-need-for-speed)) is to \"render as soon as possible\" and \"save optimistically\".\n\nIn short, say a component `<Items />` needs to display a `data` object passed through the props by the parent, we will also give the component a `fetchingData` prop, so it can render accordingly. There are 4 possible situations (the component may choose to render more than one situation in the same way):\n\n- `data` is **falsy** and `fetchingData` is **truthy**: first data load, or reset, we can render for example an empty \"skeleton\" while we wait for data\n- `data` and `fetchingData` are both **falsy**: data load returned an empty set, we can display a message for example\n- `data` is **truthy** and `fetchingData` is **falsy**: display the data \"normally\"\n- `data` and `fetchingData` are both **truthy**: a data refresh, either don't do anything and wait for data to come back, or display some kind of loading indicator\n\nFor forms, we try as much as possible to \"save optimistically\", meaning when the user \"saves\" the form, we immediately update the app state (and thus the UI), and then send the new data to the server to be saved. If the server returns an error, we should be able to rollback the app state and display some kind of error message.\n\n## Testing\n\nWe use [Mocha](http://visionmedia.github.io/mocha/) with [Chai](http://chaijs.com/) for the test framework, [Sinon.JS](http://sinonjs.org/) and [Sinon-Chai](https://github.com/domenic/sinon-chai) for spy, stubs.\n\nTo run the unit tests, use:\n\n```bash\n$ npm test\n```\n\nThen open `http://localhost:8080/webpack-dev-server/test` in your browser.\n\nThis also watches files and re-runs the tests when you make changes.\n\n## Build and deployment\n\nThe app is built as a static site in the `dist/` directory.\n\nWe use [Shio](https://github.com/tidepool-org/shio) to deploy, so we separate the build in two.\n\nShio's `build.sh` script will take care of building the app itself with:\n\n```bash\n$ npm run build-app\n```\n\nShio's `start.sh` script then builds the config from environment variables as a separate file with:\n\n```bash\n$ source config/env.sh\n$ npm run build-config\n```\n\nAfter that, the app is ready to be served using the static web included in this repo:\n\n```bash\n$ npm run server\n```\n\nYou can also build everything at once locally by simply running:\n\n```bash\n$ source config/mock.sh\n$ npm run build\n$ npm run server\n```\n\n### Running local\n\nIf you are running Blip and all services locally as per [Run Servers](https://github.com/tidepool-org/tools#runservers) then there is a workaround so you don't have to verify your new user.\n\nIf you create a new user then add the localhost secret +skip to the email address. e.g. ```me+skip@something.org```. This will then allow you to login straight away.\n","markers":{"markers":{"1":{"id":1,"range":[[131,3],[131,3]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":263,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2ceb8352ef5dd1fbf56709f7b73cfee9ceab71f1","deserializer":"TextBuffer"},{"text":"/**\n * Copyright (c) 2014, Tidepool Project\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n *\n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n\n@font-face {\n  font-family: 'Blip Icons';\n  src: url('../fonts/blip-icons.eot');\n  src: url('../fonts/blip-icons.eot#iefix') format('embedded-opentype'),\n       url('../fonts/blip-icons.woff') format('woff'),\n       url('../fonts/blip-icons.ttf') format('truetype'),\n       url('../fonts/blip-icons.svg#fontello') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Open Sans'), local('OpenSans'), url('../fonts/opensans.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 700;\n  src: local('Open Sans Bold'), local('OpenSans-Bold'), url('../fonts/opensans-bold.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-weight: 400;\n  src: local('Open Sans Italic'), local('OpenSans-Italic'), url('../fonts/opensans-italic.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-weight: 700;\n  src: local('Open Sans Bold Italic'), local('OpenSans-BoldItalic'), url('../fonts/opensans-bolditalic.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 300;\n  src: local('Open Sans Light'), local('OpenSans-Light'), url('../fonts/opensans-light.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-weight: 600;\n  src: local('Open Sans Semibold'), local('OpenSans-Semibold'), url('../fonts/opensans-semibold.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-weight: 300;\n  src: local('Open Sans Light Italic'), local('OpenSansLight-Italic'), url('../fonts/opensans-lightitalic.woff') format('woff');\n}\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-weight: 600;\n  src: local('Open Sans Semibold Italic'), local('OpenSans-SemiboldItalic'), url('../fonts/opensans-semibolditalic.woff') format('woff');\n}\n","markers":{"markers":{"1":{"id":1,"range":[[17,31],[17,31]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":271,"autoscroll":true,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/core/less/fonts.less","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"c258b851669d10f947842f655d394ed068de978d","deserializer":"TextBuffer"},{"text":"/**\n * Copyright (c) 2014, Tidepool Project\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n *\n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n\n// Icons generated with fontello.com\n\n[class^=\"icon-\"]:before, [class*=\" icon-\"]:before {\n  font-family: \"Blip Icons\";\n  font-style: normal;\n  font-weight: normal;\n  speak: none;\n\n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: .2em;\n  text-align: center;\n  /* opacity: .8; */\n\n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n\n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1em;\n\n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: .2em;\n\n  /* you can be more comfortable with increased icons size */\n  font-size: 110%;\n\n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n\n.icon-close:before { content: '\\e800'; } /* '' */\n.icon-account--down:before { content: '\\e801'; } /* '' */\n.icon-account--up:before { content: '\\e802'; } /* '' */\n.icon-add:before { content: '\\e803'; } /* '' */\n.icon-arrow-down:before { content: '\\e804'; } /* '' */\n.icon-arrow-up:before { content: '\\e805'; } /* '' */\n.icon-back-down:before { content: '\\e806'; } /* '' */\n.icon-back:before { content: '\\e807'; } /* '' */\n.icon-delete:before { content: '\\e808'; } /* '' */\n.icon-down:before { content: '\\e809'; } /* '' */\n.icon-edit:before { content: '\\e80a'; } /* '' */\n.icon-face-standin:before { content: '\\e80b'; } /* '' */\n.icon-logout:before { content: '\\e80c'; } /* '' */\n.icon-most-recent-up:before { content: '\\e80d'; } /* '' */\n.icon-pending-invite:before { content: '\\e80e'; } /* '' */\n.icon-permissions-own:before { content: '\\e80f'; } /* '' */\n.icon-permissions-upload:before { content: '\\e810'; } /* '' */\n.icon-permissions-view:before { content: '\\e811'; } /* '' */\n.icon-profile-face-2:before { content: '\\e812'; } /* '' */\n.icon-profile:before { content: '\\e813'; } /* '' */\n.icon-refresh:before { content: '\\e814'; } /* '' */\n.icon-remove:before { content: '\\e815'; } /* '' */\n.icon-right:before { content: '\\e816'; } /* '' */\n.icon-settings:before { content: '\\e817'; } /* '' */\n.icon-share-data:before { content: '\\e818'; } /* '' */\n.icon-unsure-data:before { content: '\\e819'; } /* '' */\n.icon-up:before { content: '\\e81a'; } /* '' */\n.icon-upload-data:before { content: '\\e81b'; } /* '' */\n.icon-upload:before { content: '\\e81c'; } /* '' */\n.icon-careteam:before { content: '\\e81d'; } /* '' */\n.icon-most-recent:before { content: '\\e81e'; } /* '' */\n.icon-new-hover:before { content: '\\e81f'; } /* '' */\n.icon-next-up:before { content: '\\e820'; } /* '' */\n.icon-next:before { content: '\\e821'; } /* '' */\n.icon-note-placed:before { content: '\\e822'; } /* '' */\n\n.icon-account--down {width: 20px;}\n\n@media print {\n  .icon-back, .icon-next, .icon-next-up, .icon-back-down {\n    display: none;\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[48,0],[48,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":279,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/core/less/icons.less","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3bce8a185c1f3c5bb53110a1a9db289df65f0674","deserializer":"TextBuffer"},{"text":"/** @jsx React.DOM */\n/**\n * Copyright (c) 2014, Tidepool Project\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the associated License, which is identical to the BSD 2-Clause\n * License as published by the Open Source Initiative at opensource.org.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the License for more details.\n *\n * You should have received a copy of the License along with this program; if\n * not, you can obtain one from Tidepool Project at tidepool.org.\n */\n'use strict';\n\nvar React = require('react');\nvar bows = require('bows');\nvar _ = require('lodash');\nvar async = require('async');\nvar sundial = require('sundial');\n\nvar nurseShark = require('tideline/plugins/nurseshark/');\nvar TidelineData = require('tideline/js/tidelinedata');\n\nvar config = require('./config');\nvar router = require('./router');\nvar api = require('./core/api');\nvar personUtils = require('./core/personutils');\nvar queryString = require('./core/querystring');\nvar detectTouchScreen = require('./core/notouch');\nvar utils = require('./core/utils');\n\nvar usrMessages = require('./userMessages');\n\nvar Navbar = require('./components/navbar');\nvar LogoutOverlay = require('./components/logoutoverlay');\nvar BrowserWarningOverlay = require('./components/browserwarningoverlay');\nvar TidepoolNotification = require('./components/notification');\nvar TermsOverlay = require('./components/termsoverlay');\nvar MailTo = require('./components/mailto');\n\nvar Login = require('./pages/login');\nvar Signup = require('./pages/signup');\nvar Profile = require('./pages/profile');\nvar Patients = require('./pages/patients');\nvar Patient = require('./pages/patient');\nvar PatientNew = require('./pages/patientnew');\nvar PatientData = require('./pages/patientdata');\nvar RequestPasswordReset = require('./pages/passwordreset/request');\nvar ConfirmPasswordReset = require('./pages/passwordreset/confirm');\nvar EmailVerification = require('./pages/emailverification');\n\n// Styles\nrequire('tideline/css/tideline.less');\nrequire('./core/less/fonts.less');\nrequire('./style.less');\n\n// Blip favicon\nrequire('../favicon.ico');\n\n// For React developer tools\nwindow.React = React;\n\n// Push state to be able to always go back in browser history within the app\nvar path = window.location.hash;\nwindow.history.pushState(null, null, '#/patients');\nwindow.history.pushState(null, null, path);\n\nvar DEBUG = window.localStorage && window.localStorage.debug;\n\nvar app = {\n  log: bows('App'),\n  api: api,\n  personUtils: personUtils,\n  router: router\n};\n\n// List of routes and associated handlers which display/render the routes\nvar routes = {\n  '/': 'redirectToDefaultRoute',\n  '/login': 'showLogin',\n  '/signup': 'showSignup',\n  '/email-verification' : 'showEmailVerification',\n  '/profile': 'showProfile',\n  '/patients': 'showPatients',\n  '/patients/new': 'showPatientNew',\n  '/patients/:id/profile': 'showPatient',\n  '/patients/:id/share': 'showPatientShare',\n  '/patients/:id/data': 'showPatientData',\n  '/request-password-reset': 'showRequestPasswordReset',\n  '/confirm-password-reset': 'showConfirmPasswordReset',\n  '/request-password-from-uploader': 'handleExternalPasswordUpdate'\n};\n\n// List of routes that are accessible to logged-out users\nvar noAuthRoutes = [\n  '/login',\n  '/signup',\n  '/email-verification',\n  '/request-password-reset',\n  '/confirm-password-reset'\n];\n\n// List of routes that are requested from other apps\n// (like the Chrome Uploader, for example)\nvar externalAppRoutes = [\n  '/request-password-from-uploader'\n];\n\nvar defaultNotAuthenticatedRoute = '/login';\nvar defaultAuthenticatedRoute = '/patients';\n\n// Shallow difference of two objects\n// Returns all attributes and their values in `destination`\n// that have different values from `source`\nfunction objectDifference(destination, source) {\n  var result = {};\n\n  _.forEach(source, function(sourceValue, key) {\n    var destinactionValue = destination[key];\n    if (!_.isEqual(sourceValue, destinactionValue)) {\n      result[key] = destinactionValue;\n    }\n  });\n\n  return result;\n}\n\nfunction trackMetric() {\n  var args = Array.prototype.slice.call(arguments);\n  return app.api.metrics.track.apply(app.api.metrics, args);\n}\n\nfunction buildExceptionDetails(){\n  return {\n    href: window.location.href,\n    stack: console.trace()\n  };\n}\n\nvar AppComponent = React.createClass({\n  getInitialState: function() {\n    var queryParams = queryString.parseTypes(window.location.search);\n    var timePrefs = {\n      timezoneAware: false,\n      // TODO: remove hardcoding of this in future once we actually introduce arbitrary timezone support\n      timezoneName: 'US/Pacific'\n    };\n    if (!_.isEmpty(queryParams.timezone)) {\n      var queryTimezone = queryParams.timezone.replace('-', '/');\n      try {\n        sundial.checkTimezoneName(queryTimezone);\n        timePrefs.timezoneAware = true;\n        timePrefs.timezoneName = queryTimezone;\n        app.log('Viewing data in timezone-aware mode with', queryTimezone, 'as the selected timezone.');\n      }\n      catch(err) {\n        console.log(new Error('Invalid timezone name in query parameter. (Try capitalizing properly.)'));\n      }\n    }\n    return {\n      authenticated: app.api.user.isAuthenticated(),\n      notification: null,\n      page: null,\n      user: null,\n      fetchingUser: true,\n      loggingOut: false,\n      patients: null,\n      fetchingPatients: true,\n      patient: null,\n      fetchingPatient: true,\n      invites: null,\n      fetchingInvites: true,\n      pendingInvites:null,\n      fetchingPendingInvites: true,\n      bgPrefs: null,\n      timePrefs: timePrefs,\n      patientData: null,\n      fetchingPatientData: true,\n      fetchingMessageData: true,\n      showingAcceptTerms: false,\n      showingWelcomeTitle: false,\n      showingWelcomeSetup: false,\n      showPatientData: false,\n      dismissedBrowserWarning: false,\n      verificationEmailSent: false,\n      finalizingVerification: false,\n      queryParams: queryParams\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.state.authenticated) {\n      this.fetchUser();\n    }\n\n    this.setupAndStartRouter();\n  },\n\n  setupAndStartRouter: function() {\n    var self = this;\n\n    var routingTable = {};\n    _.forEach(routes, function(handlerName, route) {\n      routingTable[route] = self[handlerName];\n    });\n\n    var isAuthenticated = function() {\n      return self.state.authenticated;\n    };\n\n    // Currently no-op\n    var onRouteChange = function() {};\n\n    app.router.setup(routingTable, {\n      isAuthenticated: isAuthenticated,\n      noAuthRoutes: noAuthRoutes,\n      externalAppRoutes: externalAppRoutes,\n      defaultNotAuthenticatedRoute: defaultNotAuthenticatedRoute,\n      defaultAuthenticatedRoute: defaultAuthenticatedRoute,\n      onRouteChange: onRouteChange\n    });\n    app.router.start();\n  },\n\n  componentWillUpdate: function(nextProps, nextState) {\n    // Called on props or state changes\n    // Since app main component has no props,\n    // this will be called on a state change\n    if (DEBUG) {\n      var stateDiff = objectDifference(nextState, this.state);\n      app.log('State changed', stateDiff);\n    }\n  },\n\n  render: function() {\n    var overlay = this.renderOverlay();\n    var navbar = this.renderNavbar();\n    var notification = this.renderNotification();\n    var page = this.renderPage();\n    var footer = this.renderFooter();\n\n    /* jshint ignore:start */\n    return (\n      <div className=\"app\" onClick={this.hideNavbarDropdown}>\n        {overlay}\n        {navbar}\n        {notification}\n        {page}\n        {footer}\n      </div>\n    );\n    /* jshint ignore:end */\n  },\n\n  renderOverlay: function() {\n    if (this.state.loggingOut) {\n      /* jshint ignore:start */\n      return (\n        <LogoutOverlay ref=\"logoutOverlay\" />\n      );\n      /* jshint ignore:end */\n    }\n\n    if (!utils.isChrome() && !this.state.dismissedBrowserWarning) {\n      /* jshint ignore:start */\n      return (\n        <BrowserWarningOverlay onSubmit={this.handleAcceptedBrowserWarning} />\n      );\n      /* jshint ignore:end */\n    }\n\n    if (this.state.showingAcceptTerms) {\n      /* jshint ignore:start */\n      return (\n        <TermsOverlay\n          onSubmit={this.handleAcceptedTerms}\n          trackMetric={trackMetric} />\n      );\n      /* jshint ignore:end */\n    }\n\n    return null;\n  },\n\n  renderNavbar: function() {\n    if (this.state.authenticated) {\n      var patient;\n      var getUploadUrl;\n\n      if (this.isPatientVisibleInNavbar()) {\n        patient = this.state.patient;\n        getUploadUrl = app.api.getUploadUrl.bind(app.api);\n      }\n\n      return (\n        /* jshint ignore:start */\n        <div className=\"App-navbar\">\n          <Navbar\n            user={this.state.user}\n            fetchingUser={this.state.fetchingUser}\n            patient={patient}\n            fetchingPatient={this.state.fetchingPatient}\n            currentPage={this.state.page}\n            getUploadUrl={getUploadUrl}\n            onLogout={this.logout}\n            trackMetric={trackMetric}\n            ref=\"navbar\"/>\n        </div>\n        /* jshint ignore:end */\n      );\n    }\n\n    return null;\n  },\n\n  isPatientVisibleInNavbar: function() {\n    // Only show patient name in navbar on certain pages\n    var page = this.state.page;\n    var result = page && page.match(/^patients\\//);\n    return Boolean(result);\n  },\n\n  renderNotification: function() {\n    var notification = this.state.notification;\n    var handleClose;\n\n    if (notification) {\n      if (notification.isDismissable) {\n        handleClose = this.closeNotification;\n      }\n\n      return (\n        /* jshint ignore:start */\n        <TidepoolNotification\n          type={notification.type}\n          onClose={handleClose}>\n          {notification.body}\n        </TidepoolNotification>\n        /* jshint ignore:end */\n      );\n    }\n\n    return null;\n  },\n\n  logSupportContact: function(){\n    trackMetric('Clicked Give Feedback');\n  },\n\n  renderFooter: function() {\n\n    var title ='Send us feedback';\n    var subject = 'Feedback on Blip';\n\n    return (\n      /* jshint ignore:start */\n      <div className='container-small-outer footer'>\n        <div className='container-small-inner'>\n          <MailTo\n            linkTitle={title}\n            emailAddress={'support@tidepool.org'}\n            emailSubject={subject}\n            onLinkClicked={this.logSupportContact} />\n        </div>\n        {this.renderVersion()}\n      </div>\n      /* jshint ignore:end */\n    );\n  },\n\n  renderVersion: function() {\n    var version = config.VERSION;\n    if (version) {\n      version = 'v' + version;\n      return (\n        /* jshint ignore:start */\n        <div className=\"Navbar-version\" ref=\"version\">{version}</div>\n        /* jshint ignore:end */\n      );\n    }\n    return null;\n  },\n\n  // Override on route change\n  renderPage: function() {\n    return null;\n  },\n\n  showLogin: function() {\n    this.renderPage = this.renderLogin;\n    //always check\n    this.finializeSignup();\n    this.setState({page: 'login'});\n  },\n\n  renderLogin: function() {\n    var email = this.getInviteEmail() || this.getSignupEmail();\n    var showAsInvite = !_.isEmpty(this.getInviteEmail());\n    return (\n      /* jshint ignore:start */\n      <Login\n        onSubmit={this.login}\n        seedEmail={email}\n        isInvite={showAsInvite}\n        onSubmitSuccess={this.handleLoginSuccess}\n        onSubmitNotAuthorized={this.handleNotAuthorized}\n        trackMetric={trackMetric} />\n      /* jshint ignore:end */\n    );\n  },\n\n  getSignupEmail: function() {\n    var hashQueryParams = app.router.getQueryParams();\n    var email = hashQueryParams.signupEmail;\n    if (!_.isEmpty(email) && utils.validateEmail(email)){\n      return email;\n    }\n    return null;\n  },\n\n  getInviteEmail: function() {\n    var hashQueryParams = app.router.getQueryParams();\n    var email = hashQueryParams.inviteEmail;\n    if(!_.isEmpty(email) && utils.validateEmail(email)){\n      return email;\n    }\n    return null;\n  },\n\n  finializeSignup: function() {\n    var self = this;\n\n    var hashQueryParams = app.router.getQueryParams();\n    if(!_.isEmpty(hashQueryParams.signupKey) && !this.state.finalizingVerification){\n      app.api.user.confirmSignUp(hashQueryParams.signupKey, function(err){\n        if(err){\n          app.log('finializeSignup err ',err);\n        }\n        self.setState({finalizingVerification:true});\n      });\n    }\n    return;\n  },\n\n  showSignup: function() {\n    this.renderPage = this.renderSignup;\n    this.setState({page: 'signup'});\n  },\n\n  showEmailVerification: function() {\n    this.renderPage = this.renderEmailVerification;\n    this.setState({page: 'email-verification'});\n  },\n\n  renderSignup: function() {\n    return (\n      /* jshint ignore:start */\n      <Signup\n        onSubmit={this.signup}\n        inviteEmail={this.getInviteEmail()}\n        onSubmitSuccess={this.handleSignupSuccess}\n        trackMetric={trackMetric} />\n      /* jshint ignore:end */\n    );\n  },\n\n  renderEmailVerification: function() {\n    return (\n      /* jshint ignore:start */\n      <EmailVerification\n        sent={this.state.verificationEmailSent}\n        onSubmitResend={api.user.resendEmailVerification.bind(app.api)}\n        trackMetric={trackMetric}/>\n      /* jshint ignore:end */\n    );\n  },\n\n  showProfile: function() {\n    this.renderPage = this.renderProfile;\n    this.setState({page: 'profile'});\n    trackMetric('Viewed Account Edit');\n  },\n\n  renderProfile: function() {\n    return (\n      /* jshint ignore:start */\n      <Profile\n          user={this.state.user}\n          fetchingUser={this.state.fetchingUser}\n          onSubmit={this.updateUser}\n          trackMetric={trackMetric}/>\n      /* jshint ignore:end */\n    );\n  },\n\n  redirectToDefaultRoute: function() {\n    this.showPatients(true);\n  },\n  showPatients: function(showPatientData) {\n    this.setState({showPatientData: showPatientData});\n    this.renderPage = this.renderPatients;\n    this.setState({page: 'patients'});\n    this.fetchInvites();\n    this.fetchPatients();\n    trackMetric('Viewed Care Team List');\n  },\n  renderPatients: function() {\n    var patients;\n    /* jshint ignore:start */\n    patients = <Patients\n        user={this.state.user}\n        fetchingUser={this.state.fetchingUser}\n        patients={this.state.patients}\n        fetchingPatients={this.state.fetchingPatients}\n        invites={this.state.invites}\n        uploadUrl={app.api.getUploadUrl()}\n        fetchingInvites={this.state.fetchingInvites}\n        showingWelcomeTitle={this.state.showingWelcomeTitle}\n        showingWelcomeSetup={this.state.showingWelcomeSetup}\n        onHideWelcomeSetup={this.handleHideWelcomeSetup}\n        trackMetric={trackMetric}\n        onAcceptInvitation={this.handleAcceptInvitation}\n        onDismissInvitation={this.handleDismissInvitation}\n        onRemovePatient={this.handleRemovePatient}/>;\n    /* jshint ignore:end */\n\n    // Determine whether to skip the Patients page & go directly to Patient data.\n    // If there is only one patient you can see data for, go to the patient's data.\n    // Otherwise, display the Patients page.\n    if (this.state.showPatientData) {\n\n      if (!this.state.fetchingUser && !this.state.fetchingPatients && !this.state.fetchingInvites) {\n\n        var viewerUserId = null;\n        var isPatient = personUtils.isPatient(this.state.user);\n        var numPatientsUserCanSee = (this.state.patients == null) ? 0 : this.state.patients.length;\n\n        // First check that the user has no pending invites\n        if (_.isEmpty(this.state.invites)) {\n\n          // Then determine how many people the user can view\n          if (isPatient) {\n            if (numPatientsUserCanSee === 0) {\n              viewerUserId = this.state.user.userid;\n            }\n          } else {\n            if (numPatientsUserCanSee === 1) {\n              viewerUserId = this.state.patients[0].userid;\n            }\n          }\n\n          // Last, set the appropriate route\n          if (viewerUserId === null) {\n            app.router.setRoute('/patients');\n            return;\n          } else {\n            app.router.setRoute('/patients/' + viewerUserId + '/data');\n            return;\n          }\n        }\n\n        app.router.setRoute('/patients');\n      }\n\n      return;\n    }\n\n    return (patients);\n  },\n  handleHideWelcomeSetup: function(options) {\n    if (options && options.route) {\n      app.router.setRoute(options.route);\n    }\n    this.setState({showingWelcomeSetup: false});\n  },\n  handleDismissInvitation: function(invitation) {\n    var self = this;\n\n    this.setState({\n      showingWelcomeSetup: false,\n      invites: _.filter(this.state.invites, function(e){\n        return e.key !== invitation.key;\n      })\n    });\n\n    app.api.invitation.dismiss(invitation.key, invitation.creator.userid, function(err) {\n      if(err) {\n        self.setState({\n          invites: self.state.invites.concat(invitation)\n        });\n       return self.handleApiError(err, usrMessages.ERR_DISMISSING_INVITE, buildExceptionDetails());\n      }\n    });\n  },\n  handleAcceptInvitation: function(invitation) {\n    var invites = _.cloneDeep(this.state.invites);\n    var self = this;\n\n    this.setState({\n      showingWelcomeSetup: false,\n      invites: _.map(invites, function(invite) {\n        if (invite.key === invitation.key) {\n          invite.accepting = true;\n        }\n        return invite;\n      })\n    });\n\n    app.api.invitation.accept(invitation.key, invitation.creator.userid, function(err) {\n\n      var invites = _.cloneDeep(self.state.invites);\n      if (err) {\n        self.setState({\n          invites: _.map(invites, function(invite) {\n            if (invite.key === invitation.key) {\n              invite.accepting = false;\n            }\n            return invite;\n          })\n        });\n        return self.handleApiError(err, usrMessages.ERR_ACCEPTING_INVITE, buildExceptionDetails());\n      }\n\n      self.setState({\n        invites: _.filter(invites, function(e){\n          return e.key !== invitation.key;\n        }),\n        patients: self.state.patients.concat(invitation.creator)\n      });\n    });\n  },\n  handleChangeMemberPermissions: function(patientId, memberId, permissions, cb) {\n    var self = this;\n\n    api.access.setMemberPermissions(memberId, permissions, function(err) {\n      if(err) {\n        cb(err);\n        return self.handleApiError(err, usrMessages.ERR_CHANGING_PERMS, buildExceptionDetails());\n      }\n\n      self.fetchPatient(patientId, cb);\n    });\n  },\n  handleRemovePatient: function(patientId,cb) {\n    var self = this;\n\n    api.access.leaveGroup(patientId, function(err) {\n      if(err) {\n\n        return self.handleApiError(err, usrMessages.ERR_REMOVING_MEMBER, buildExceptionDetails());\n\n      }\n\n      self.fetchPatients();\n    });\n  },\n  handleRemoveMember: function(patientId, memberId, cb) {\n    var self = this;\n\n    api.access.removeMember(memberId, function(err) {\n      if(err) {\n        cb(err);\n        return self.handleApiError(err, usrMessages.ERR_REMOVING_MEMBER ,buildExceptionDetails());\n      }\n\n      self.fetchPatient(patientId, cb);\n    });\n  },\n  handleInviteMember: function(email, permissions, cb) {\n    var self = this;\n\n    api.invitation.send(email, permissions, function(err, invitation) {\n      if(err) {\n        if (cb) {\n          cb(err);\n        }\n        if (err.status === 500) {\n          return self.handleApiError(err, usrMessages.ERR_INVITING_MEMBER, buildExceptionDetails());\n        }\n        return;\n      }\n\n      self.setState({\n        pendingInvites: utils.concat(self.state.pendingInvites || [], invitation)\n      });\n      if (cb) {\n        cb(null, invitation);\n      }\n      self.fetchPendingInvites();\n    });\n  },\n  handleCancelInvite: function(email, cb) {\n    var self = this;\n\n    api.invitation.cancel(email, function(err) {\n      if(err) {\n        if (cb) {\n          cb(err);\n        }\n        return self.handleApiError(err, usrMessages.ERR_CANCELING_INVITE, buildExceptionDetails());\n      }\n\n      self.setState({\n        pendingInvites: _.reject(self.state.pendingInvites, function(i) {\n          return i.email === email;\n        })\n      });\n      if (cb) {\n        cb();\n      }\n      self.fetchPendingInvites();\n    });\n  },\n  showPatient: function(patientId) {\n    this.renderPage = this.renderPatient;\n    this.setState({\n      page: 'patients/' + patientId + '/profile',\n      // Reset patient object to avoid showing previous one\n      patient: null,\n      // Indicate renderPatient() that we are fetching the patient\n      // (important to have this on next render)\n      fetchingPatient: true\n    });\n    this.fetchPendingInvites();\n    this.fetchPatient(patientId,function(err,patient){\n      return;\n    });\n    trackMetric('Viewed Profile');\n  },\n\n  showPatientShare: function(patientId) {\n    this.renderPage = this.renderPatientShare;\n    this.setState({\n      page: 'patients/' + patientId + '/share',\n      // Reset patient object to avoid showing previous one\n      patient: null,\n      // Indicate renderPatient() that we are fetching the patient\n      // (important to have this on next render)\n      fetchingPatient: true\n    });\n    this.fetchPendingInvites();\n    this.fetchPatient(patientId,function(err,patient){\n      return;\n    });\n    trackMetric('Viewed Share');\n  },\n\n  renderPatient: function() {\n    // On each state change check if patient object was returned from server\n    if (this.isDoneFetchingAndNotFoundPatient()) {\n      app.log('Patient not found');\n      this.redirectToDefaultRoute();\n      return;\n    }\n\n    /* jshint ignore:start */\n    return (\n      <Patient\n        user={this.state.user}\n        fetchingUser={this.state.fetchingUser}\n        patient={this.state.patient}\n        fetchingPatient={this.state.fetchingPatient}\n        onUpdatePatient={this.updatePatient}\n        pendingInvites={this.state.pendingInvites}\n        onChangeMemberPermissions={this.handleChangeMemberPermissions}\n        onRemoveMember={this.handleRemoveMember}\n        onInviteMember={this.handleInviteMember}\n        onCancelInvite={this.handleCancelInvite}\n        trackMetric={trackMetric}/>\n    );\n    /* jshint ignore:end */\n  },\n\n  renderPatientShare: function() {\n    // On each state change check if patient object was returned from server\n    if (this.isDoneFetchingAndNotFoundPatient()) {\n      app.log('Patient not found');\n      this.redirectToDefaultRoute();\n      return;\n    }\n\n    /* jshint ignore:start */\n    return (\n      <Patient\n        user={this.state.user}\n        shareOnly={true}\n        fetchingUser={this.state.fetchingUser}\n        patient={this.state.patient}\n        fetchingPatient={this.state.fetchingPatient}\n        onUpdatePatient={this.updatePatient}\n        pendingInvites={this.state.pendingInvites}\n        onChangeMemberPermissions={this.handleChangeMemberPermissions}\n        onRemoveMember={this.handleRemoveMember}\n        onInviteMember={this.handleInviteMember}\n        onCancelInvite={this.handleCancelInvite}\n        trackMetric={trackMetric}/>\n    );\n    /* jshint ignore:end */\n  },\n\n  isDoneFetchingAndNotFoundPatient: function() {\n    // Wait for patient object to come back from server\n    if (this.state.fetchingPatient) {\n      return false;\n    }\n\n    return !this.state.patient;\n  },\n\n  showPatientNew: function() {\n    this.renderPage = this.renderPatientNew;\n    this.setState({\n      page: 'patients/new',\n      patient: null,\n      fetchingPatient: false\n    });\n    trackMetric('Viewed Profile Create');\n  },\n\n  renderPatientNew: function() {\n    // Make sure user doesn't already have a patient\n    if (this.isDoneFetchingAndUserHasPatient()) {\n      var patientId = this.state.user.userid;\n      var route = '/patients/' + patientId;\n      app.log('User already has patient');\n      app.router.setRoute(route);\n      return;\n    }\n\n    /* jshint ignore:start */\n    return (\n      <PatientNew\n          user={this.state.user}\n          fetchingUser={this.state.fetchingUser}\n          onSubmit={this.createPatient}\n          onSubmitSuccess={this.handlePatientCreationSuccess}\n          trackMetric={trackMetric}/>\n    );\n    /* jshint ignore:end */\n  },\n\n  isDoneFetchingAndUserHasPatient: function() {\n    // Wait to have user object back from server\n    if (this.state.fetchingUser) {\n      return false;\n    }\n\n    return personUtils.isPatient(this.state.user);\n  },\n\n  isSamePersonUserAndPatient: function() {\n    return personUtils.isSame(this.state.user, this.state.patient);\n  },\n\n  showPatientData: function(patientId) {\n    this.renderPage = this.renderPatientData;\n    this.setState({\n      page: 'patients/' + patientId + '/data',\n      patient: null,\n      fetchingPatient: true,\n      patientData: null,\n      fetchingPatientData: true\n    });\n\n    var self = this;\n    this.fetchPatient(patientId, function(err, patient) {\n      self.fetchPatientData(patient);\n    });\n\n    trackMetric('Viewed Data');\n  },\n\n  renderPatientData: function() {\n    // On each state change check if patient object was returned from server\n    if (this.isDoneFetchingAndNotFoundPatient()) {\n      app.log('Patient not found');\n      this.redirectToDefaultRoute();\n      return;\n    }\n\n    /* jshint ignore:start */\n    return (\n      <PatientData\n        user={this.state.user}\n        patient={this.state.patient}\n        bgPrefs={this.state.bgPrefs}\n        timePrefs={this.state.timePrefs}\n        patientData={this.state.patientData}\n        fetchingPatientData={this.state.fetchingPatientData}\n        isUserPatient={this.isSamePersonUserAndPatient()}\n        queryParams={this.state.queryParams}\n        uploadUrl={app.api.getUploadUrl()}\n        onRefresh={this.fetchCurrentPatientData}\n        onFetchMessageThread={this.fetchMessageThread}\n        onSaveComment={app.api.team.replyToMessageThread.bind(app.api.team)}\n        onCreateMessage={app.api.team.startMessageThread.bind(app.api.team)}\n        onEditMessage={app.api.team.editMessage.bind(app.api.team)}\n        onUpdatePatientData={this.handleUpdatePatientData}\n        trackMetric={trackMetric}/>\n    );\n    /* jshint ignore:end */\n  },\n\n  handleUpdatePatientData: function(data) {\n    this.setState({\n      patientData: data\n    });\n  },\n\n  login: function(formValues, cb) {\n    var user = formValues.user;\n    var options = formValues.options;\n\n    app.api.user.login(user, options, cb);\n  },\n\n  handleLoginSuccess: function() {\n\n    this.fetchUser();\n    if( this.state.finalizingVerification ){\n      this.setState({\n        showingAcceptTerms: config.SHOW_ACCEPT_TERMS ? true : false,\n        showingWelcomeTitle: true,\n        showingWelcomeSetup: true\n      });\n      trackMetric('Finalized Signup');\n    }\n    this.setState({authenticated: true});\n    this.redirectToDefaultRoute();\n    trackMetric('Logged In');\n  },\n\n  handleNotAuthorized:function(){\n     this.setState({authenticated: false,  verificationEmailSent: false});\n     this.showEmailVerification();\n  },\n\n  signup: function(formValues, cb) {\n    var user = formValues;\n    app.api.user.signup(user, cb);\n  },\n\n  handleSignupSuccess: function(user) {\n    //once signed up we need to authenicate the email which is done via the email we have sent them\n    this.setState({\n      fetchingUser: false,\n      verificationEmailSent: true\n    });\n\n    this.showEmailVerification();\n\n    trackMetric('Signed Up');\n  },\n\n  handleSignupVerificationSuccess: function(user) {\n    //once signed up we need to authenicate the email which is done via the email we have sent them\n    this.setState({\n      authenticated: true,\n      user: user,\n      fetchingUser: false,\n      showingAcceptTerms: config.SHOW_ACCEPT_TERMS ? true : false,\n      showingWelcomeTitle: true,\n      showingWelcomeSetup: true\n    });\n\n    this.redirectToDefaultRoute();\n    trackMetric('Signup Verified');\n  },\n\n  handleAcceptedTerms: function() {\n    this.setState({\n      showingAcceptTerms: false\n    });\n  },\n\n  handleAcceptedBrowserWarning: function() {\n    this.setState({\n      dismissedBrowserWarning: true\n    });\n  },\n\n  logout: function() {\n    var self = this;\n\n    if (this.state.loggingOut) {\n      return;\n    }\n\n    this.setState({\n      loggingOut: true,\n      dismissedBrowserWarning: false\n    });\n\n    // Need to track this before expiring auth token\n    trackMetric('Logged Out');\n\n    //Logout but don't wait for details\n    app.api.user.logout();\n\n    self.setState({loggingOut: false});\n\n    self.handleLogoutSuccess();\n  },\n\n  handleLogoutSuccess: function() {\n    // Nasty race condition between React state change and router it seems,\n    // need to call `showLogin()` to make sure we don't try to render something\n    // else, although it will get called again after router changes route, but\n    // that's ok\n    this.showLogin();\n    this.setState({authenticated: false});\n    this.clearUserData();\n    router.setRoute('/login');\n  },\n\n  closeNotification: function() {\n    this.setState({notification: null});\n  },\n\n  fetchUser: function() {\n    var self = this;\n\n    self.setState({fetchingUser: true});\n\n    app.api.user.get(function(err, user) {\n      if (err) {\n        self.setState({fetchingUser: false});\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_USER, buildExceptionDetails());\n      }\n\n      self.setState({\n        user: user,\n        fetchingUser: false\n      });\n    });\n  },\n\n  fetchPendingInvites: function(cb) {\n    var self = this;\n\n    self.setState({fetchingPendingInvites: true});\n\n    api.invitation.getSent(function(err, invites) {\n      if (err) {\n        self.setState({\n          fetchingPendingInvites: false\n        });\n\n        if (cb) {\n          cb(err);\n        }\n\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_PENDING_INVITES, buildExceptionDetails());\n      }\n\n      self.setState({\n        pendingInvites: invites,\n        fetchingPendingInvites: false\n      });\n\n      if (cb) {\n        cb();\n      }\n    });\n  },\n\n  fetchInvites: function() {\n    var self = this;\n\n    self.setState({fetchingInvites: true});\n\n    api.invitation.getReceived(function(err, invites) {\n      if (err) {\n\n        self.setState({\n          fetchingInvites: false\n        });\n\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_INVITES, buildExceptionDetails());\n      }\n\n      self.setState({\n        invites: invites,\n        fetchingInvites: false\n      });\n    });\n  },\n\n  fetchPatients: function(options) {\n    var self = this;\n\n    if(options && !options.hideLoading) {\n        self.setState({fetchingPatients: true});\n    }\n\n    app.api.patient.getAll(function(err, patients) {\n      if (err) {\n        self.setState({fetchingPatients: false});\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_TEAMS, buildExceptionDetails());\n      }\n\n      self.setState({\n        patients: patients,\n        fetchingPatients: false\n      });\n    });\n  },\n\n  fetchPatient: function(patientId, callback) {\n    var self = this;\n\n    self.setState({fetchingPatient: true});\n\n    app.api.patient.get(patientId, function(err, patient) {\n      if (err) {\n        self.setState({fetchingPatient: false});\n\n        // Patient with id not found, cary on\n        if (err.status === 404) {\n          app.log('Patient not found with id '+patientId);\n          return;\n        }\n\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_PATIENT+patientId, buildExceptionDetails());\n      }\n\n      self.setState({\n        patient: patient,\n        fetchingPatient: false\n      });\n\n      if (typeof callback === 'function') {\n        callback(null, patient);\n      }\n    });\n  },\n\n  fetchPatientData: function(patient) {\n    var self = this;\n\n    var patientId = patient.userid;\n\n    self.setState({fetchingPatientData: true});\n\n    var loadPatientData = function(cb) {\n      app.api.patientData.get(patientId, cb);\n    };\n\n    var loadTeamNotes = function(cb) {\n      app.api.team.getNotes(patientId, cb);\n    };\n\n    async.parallel({\n      patientData: loadPatientData,\n      teamNotes: loadTeamNotes\n    },\n    function(err, results) {\n      if (err) {\n        self.setState({fetchingPatientData: false});\n        // Patient with id not found, cary on\n        if (err.status === 404) {\n          app.log('No data found for patient '+patientId);\n          return;\n        }\n\n        return self.handleApiError(err, usrMessages.ERR_FETCHING_PATIENT_DATA+patientId, buildExceptionDetails());\n      }\n\n      var patientData = results.patientData || [];\n      var notes = results.teamNotes || [];\n\n      app.log('Patient device data count', patientData.length);\n      app.log('Team notes count', notes.length);\n\n      var combinedData = patientData.concat(notes);\n      window.downloadInputData = function() {\n        console.save(combinedData, 'blip-input.json');\n      };\n      patientData = self.processPatientData(combinedData);\n\n      self.setState({\n        bgPrefs: {\n          bgClasses: patientData.bgClasses,\n          bgUnits: patientData.bgUnits\n        },\n        patientData: patientData,\n        fetchingPatientData: false\n      });\n    });\n  },\n\n  fetchMessageThread: function(messageId,callback) {\n    app.log('fetching messages for ' + messageId);\n\n    var self = this;\n    self.setState({fetchingMessageData: true});\n\n    app.api.team.getMessageThread(messageId,function(err, thread){\n      self.setState({fetchingMessageData: false});\n\n      if (err) {\n        self.handleApiError(err, usrMessages.ERR_FETCHING_MESSAGE_DATA+messageId, buildExceptionDetails());\n        return callback(null);\n      }\n\n      app.log('Fetched message thread with '+thread.length+' messages');\n      return callback(thread);\n    });\n  },\n\n  processPatientData: function(data) {\n    if (!(data && data.length >= 0)) {\n      return null;\n    }\n\n    console.time('Nurseshark Total');\n    var res = nurseShark.processData(data, this.state.timePrefs);\n    console.timeEnd('Nurseshark Total');\n    console.time('TidelineData Total');\n    var tidelineData = new TidelineData(res.processedData, {timePrefs: this.state.timePrefs});\n    console.timeEnd('TidelineData Total');\n\n    window.tidelineData = tidelineData;\n    window.downloadProcessedData = function() {\n      console.save(res.processedData, 'nurseshark-output.json');\n    };\n    window.downloadErroredData = function() {\n      console.save(res.erroredData, 'errored.json');\n    };\n\n    return tidelineData;\n  },\n\n  fetchCurrentPatientData: function() {\n    var patient = this.state.patient;\n\n    if (!patient) {\n      return;\n    }\n\n    this.fetchPatientData(patient);\n  },\n\n  clearUserData: function() {\n    this.setState({\n      user: null,\n      patients: null,\n      patient: null,\n      patientData: null,\n      showingAcceptTerms: false,\n      showingWelcomeTitle: false,\n      finalizingVerification: false,\n      fetchingUser: true,\n      fetchingPatients: true,\n      fetchingInvites: true,\n      showingWelcomeSetup: false,\n      dismissedBrowserWarning: false,\n      showPatientData: false\n    });\n  },\n\n  updateUser: function(formValues) {\n    var self = this;\n    var previousUser = this.state.user;\n\n    var newUser = _.assign(\n      {},\n      _.omit(previousUser, 'profile'),\n      _.omit(formValues, 'profile'),\n      {profile: _.assign({}, previousUser.profile, formValues.profile)}\n    );\n\n    // Optimistic update\n    self.setState({user: _.omit(newUser, 'password')});\n\n    var userUpdates = _.cloneDeep(newUser);\n    // If username hasn't changed, don't try to update\n    // or else backend will respond with \"already taken\" error\n    if (userUpdates.username === previousUser.username) {\n      userUpdates = _.omit(userUpdates, 'username', 'emails');\n    }\n\n    app.api.user.put(userUpdates, function(err, user) {\n      if (err) {\n        // Rollback\n        self.setState({user: previousUser});\n        return self.handleApiError(err, usrMessages.ERR_UPDATING_ACCOUNT, buildExceptionDetails());\n      }\n\n      user = _.assign(newUser, user);\n      self.setState({user: user});\n      trackMetric('Updated Account');\n    });\n  },\n\n  createPatient: function(patient, cb) {\n    app.api.patient.post(patient, cb);\n  },\n\n  handlePatientCreationSuccess: function(patient) {\n    trackMetric('Created Profile');\n    this.setState({\n      user: _.extend({}, this.state.user, {\n        profile: _.cloneDeep(patient.profile)\n      }),\n      patient: patient\n    });\n    var route = '/patients/' + patient.userid + '/data';\n    app.router.setRoute(route);\n  },\n\n  updatePatient: function(patient) {\n    var self = this;\n    var previousPatient = this.state.patient;\n\n    // Optimistic update\n    self.setState({patient: patient});\n\n    app.api.patient.put(patient, function(err, patient) {\n      if (err) {\n        // Rollback\n        self.setState({patient: previousPatient});\n        return self.handleApiError(err, usrMessages.ERR_UPDATING_PATIENT, buildExceptionDetails());\n      }\n      self.setState({\n        patient: _.assign({}, previousPatient, {profile: patient.profile})\n      });\n      trackMetric('Updated Profile');\n    });\n  },\n\n  handleApiError: function(error, message, details) {\n    if (message) {\n      app.log(message);\n    }\n    //send it quick\n    app.api.errors.log(this.stringifyErrorData(error), message, this.stringifyErrorData(details));\n\n    if (error.status === 401) {\n      //Just log them out\n      app.log('401 so logged user out');\n      this.setState({notification: null});\n      app.api.user.destroySession();\n      this.handleLogoutSuccess();\n      return;\n    } else {\n      var body;\n\n      if(error.status === 500){\n        //somethings down, give a bit of time then they can try again\n        body = ( <p> {usrMessages.ERR_SERVICE_DOWN} </p> );\n      } else if(error.status === 503){\n        //offline nothing is going to work\n        body = ( <p> {usrMessages.ERR_OFFLINE} </p> );\n      } else {\n\n        var originalErrorMessage = [\n          message, this.stringifyErrorData(error)\n        ].join(' ');\n\n        body = (\n          <div>\n            <p>\n              {usrMessages.ERR_GENERIC}\n              <a href=\"/\">refresh your browser</a>\n              {'.'}\n            </p>\n            <p className=\"notification-body-small\">\n              <code>{'Original error message: ' + originalErrorMessage}</code>\n            </p>\n          </div>\n        );\n      }\n      this.setState({\n        notification: {\n          type: 'error',\n          body: body,\n          isDismissable: true\n        }\n      });\n    }\n  },\n\n  stringifyErrorData: function(data) {\n\n    if(_.isEmpty(data)){\n      return '';\n    }\n\n    if (_.isPlainObject(data)) {\n      return JSON.stringify(data);\n    }\n    else {\n      return data.toString();\n    }\n  },\n\n  showRequestPasswordReset: function() {\n    this.renderPage = this.renderRequestPasswordReset;\n    this.setState({\n      page: 'request-password-reset'\n    });\n  },\n\n  renderRequestPasswordReset: function() {\n    return (\n      /* jshint ignore:start */\n      <RequestPasswordReset\n        onSubmit={app.api.user.requestPasswordReset.bind(app.api)}\n        trackMetric={trackMetric} />\n      /* jshint ignore:end */\n    );\n  },\n\n  showConfirmPasswordReset: function() {\n    this.renderPage = this.renderConfirmPasswordReset;\n    this.setState({\n      page: 'confirm-password-reset'\n    });\n  },\n\n  renderConfirmPasswordReset: function() {\n    return (\n      /* jshint ignore:start */\n      <ConfirmPasswordReset\n        key={this.getPasswordResetKey()}\n        onSubmit={app.api.user.confirmPasswordReset.bind(app.api)}\n        trackMetric={trackMetric} />\n      /* jshint ignore:end */\n    );\n  },\n\n  getPasswordResetKey: function() {\n    var hashQueryParams = app.router.getQueryParams();\n    return hashQueryParams.resetKey;\n  },\n\n  handleExternalPasswordUpdate: function() {\n    // If the user is logged in, go to their profile to update password\n    if (this.state.authenticated) {\n      this.renderPage = this.renderProfile;\n      this.setState({page: 'profile'});\n    } else {\n      // If the user is not logged in, go to the forgot password page\n      this.renderPage = this.renderRequestPasswordReset;\n      this.setState({page: 'request-password-reset'});\n    }\n  },\n\n  hideNavbarDropdown: function() {\n  var navbar = this.refs.navbar;\n\n  if (navbar) {\n    navbar.hideDropdown();\n  }\n}\n});\n\napp.start = function() {\n  var self = this;\n\n  this.init(function() {\n    self.component = React.renderComponent(\n      /* jshint ignore:start */\n      <AppComponent />,\n      /* jshint ignore:end */\n      document.getElementById('app')\n    );\n\n    self.log('App started');\n\n    if (self.mock) {\n      self.log('App running with mock services');\n    }\n  });\n};\n\napp.useMock = function(mock) {\n  this.mock = mock;\n  this.api = mock.patchApi(this.api);\n};\n\napp.init = function(callback) {\n  var self = this;\n\n  function beginInit() {\n    initNoTouch();\n  }\n\n  function initNoTouch() {\n    detectTouchScreen();\n    initMock();\n  }\n\n  function initMock() {\n    if (self.mock) {\n      // Load mock params from config variables\n      // and URL query string (before hash)\n      var paramsConfig = queryString.parseTypes(config.MOCK_PARAMS);\n      var paramsUrl = queryString.parseTypes(window.location.search);\n      var params = _.assign(paramsConfig, paramsUrl);\n\n      self.mock.init(params);\n      self.log('Mock services initialized with params', params);\n    }\n    initApi();\n  }\n\n  function initApi() {\n    self.api.init(callback);\n  }\n\n  beginInit();\n};\n\nmodule.exports = app;\n","markers":{"markers":{"1":{"id":1,"range":[[1455,2],[1455,2]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":337,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"342":{"id":342,"range":[[475,0],[475,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"357":{"id":357,"range":[[475,0],[475,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[1453,0],[1453,2]],"newRange":[[1453,0],[1453,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1452,2],[1453,0]],"newRange":[[1452,2],[1452,20]],"oldText":"\n","newText":"hideNavbarDropdown","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false,"range":[[1452,20],[1452,20]]},"newParams":{"tailed":true,"range":[[1452,2],[1452,20]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/sarah/tidepool/blip/app/app.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e72b6db2cbfc4ecb0c6021fb589b5c3b9c6165c6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":198,"items":[{"id":219,"softTabs":true,"displayBuffer":{"id":220,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/components/navbar/index.js","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":227,"softTabs":true,"displayBuffer":{"id":228,"softWrapped":true,"editorWidthInChars":null,"scrollTop":4633,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/components/navbar/navbar.js","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":337,"softTabs":true,"displayBuffer":{"id":338,"softWrapped":true,"editorWidthInChars":null,"scrollTop":31031,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/app.js","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":279,"softTabs":true,"displayBuffer":{"id":280,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/core/less/icons.less","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":271,"softTabs":true,"displayBuffer":{"id":272,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/core/less/fonts.less","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":263,"softTabs":true,"displayBuffer":{"id":264,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/README.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":255,"softTabs":true,"displayBuffer":{"id":256,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/tidepool/blip/app/components/navbar/navbar.less","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/sarah/tidepool/blip/app/components/navbar/navbar.js","focused":false,"deserializer":"Pane"},"activePaneId":198,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-javascript","react","language-less","language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sarah/tidepool/blip/app/components/navbar/index.js":1423158074756,"/Users/sarah/tidepool/blip/app/components/navbar/navbar.js":1423426167278,"/Users/sarah/tidepool/blip/app/app.js":1423426159224,"/Users/sarah/tidepool/blip/app/core/less/icons.less":1423072473943,"/Users/sarah/tidepool/blip/app/core/less/fonts.less":1423072375081,"/Users/sarah/tidepool/blip/README.md":1423072334775,"/Users/sarah/tidepool/blip/app/components/navbar/navbar.less":1423256427643},"keybinding-resolver":{},"metrics":{"sessionLength":372267},"tree-view":{"directoryExpansionStates":{"app":{}},"selectedPath":"/Users/sarah/tidepool/blip/app/components","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":257},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["21","This version of Blip","label-input-group-","input-group-checkbox","termsOverlay","handleLogin","grid-patient-data-footer","patient-data-footer","grid","medium-one-half","patient-data-footer","patient-data-footer-inner","Navbar-icon","blip-icons","icon-arrow-down","renderMenuSection","showDropdown","Navbar-menuDropdown","preventDefault","handleClick","this.hideNavbarDropdown","hideNavbarDropdown","navbar","ref=\"navbar\"","handleClickUser"],"replaceHistory":[],"pathsHistory":[]}}}