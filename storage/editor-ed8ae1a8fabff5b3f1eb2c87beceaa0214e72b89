{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1440,"height":900,"maximized":true},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/sarah/code/iOS/Experiments/Creatures are Friends","buffers":[{"text":"//\n//  PhotoEdit.swift\n//  Creatures are Friends\n//\n//  Created by Sarah Kuehnle on 9/11/14.\n//  Copyright (c) 2014 Sarah Kuehnle. All rights reserved.\n//\n\nimport UIKit\nimport Photos\nimport CoreImage\nimport CoreGraphics\n\nclass PhotoEdit: UIViewController, UIGestureRecognizerDelegate {\n\n    // Number of character images in the library\n    let characterCount = 20\n\n    // Photos Framework\n    var assetCollection: PHAssetCollection!\n    var photos: PHFetchResult!\n    var index: Int!\n\n    // Information about the character\n    var characterInfo = [ String: CGFloat]()\n    var currScale: CGFloat = 1\n    var currRotation: CGFloat = 0\n    var characterPos: CGPoint = CGPointZero\n\n    @IBOutlet var imgContainer: UIView! // The View that contains the photo and character\n    @IBOutlet var photoImg: UIImageView! // The main photo\n    @IBOutlet var characterImg: UIImageView! // The character head\n\n    // Creates a new photo out of the combined character and photo images\n    func getCombinedImage(topImg: UIImage, bottomImg: UIImage) -> UIImage {\n\n        // Create CIImage versions of the top & bottom images\n        let fgImg = CIImage(image: topImg)\n        let bgImg = CIImage(image: bottomImg)\n\n        // Affine transformations\n        let makeRotation = CGAffineTransformMakeRotation(-(characterInfo[\"rotation\"]!))\n        let makeScale = CGAffineTransformMakeScale((characterInfo[\"scale\"])!/2, (characterInfo[\"scale\"])!/2)\n\n        // Affine transformation matrix\n        let affineConcat = CGAffineTransformConcat(makeScale, makeRotation)\n\n        // Define the context\n        let affineContext = CIContext(options: nil)\n\n        // Affine filter\n        let affineFilter: CIFilter = CIFilter(name: \"CIAffineTransform\")\n        affineFilter.setValue(fgImg, forKey: \"inputImage\")\n        affineFilter.setValue(NSValue(CGAffineTransform: affineConcat), forKey: \"inputTransform\")\n\n        // Grab the resulting image data\n        let affineResult = affineFilter.valueForKey(\"outputImage\") as CIImage\n\n        // Define the size of the final image, this is the size of the photo\n        let photoSize = CGSizeMake(bottomImg.size.width, bottomImg.size.height)\n\n        // Begin the image context\n        UIGraphicsBeginImageContext(photoSize)\n\n        // Add the photo to the context\n        bottomImg.drawInRect(CGRectMake(0, 0, photoSize.width, photoSize.height))\n\n        // Set up the details for the new character image\n        let newFgImg = UIImage(CIImage: affineResult)\n        let newFgImgWidth = newFgImg?.size.width\n        let newFgImgHeight = newFgImg?.size.height\n\n        newFgImg?.drawInRect(CGRectMake(characterInfo[\"xPos\"]!, characterInfo[\"yPos\"]!, newFgImgWidth!, newFgImgHeight!), blendMode: kCGBlendModeNormal, alpha: 1.0)\n\n        // Grab the graphic from the image context\n        let newImage:UIImage = UIGraphicsGetImageFromCurrentImageContext()\n\n        // End the context\n        UIGraphicsEndImageContext()\n\n        return newImage\n    }\n\n    // Returns a random integer between two specified numbers\n    func randomInt(min: Int, max: Int) -> Int {\n        return min + Int(arc4random_uniform(UInt32(max - min + 1)))\n    }\n\n    // Retrieves an image using PHImageManager, the target size is of the screen dimensions.\n    func displayPhoto() {\n        let imageManager = PHImageManager.defaultManager()\n        let optionsForImage = PHImageRequestOptions()\n        optionsForImage.resizeMode = .Exact\n        optionsForImage.synchronous = true\n\n        let id = imageManager.requestImageForAsset(self.photos[self.index] as PHAsset, targetSize: CGSize(width: imgContainer.bounds.width, height: imgContainer.bounds.height), contentMode: .AspectFill, options: optionsForImage, resultHandler: {(result, info) in\n            self.photoImg.image = result\n        })\n    }\n\n    // Adds the new photo to the Creatures are Friends library\n    func addNewAssetWithImage(image: UIImage, toAlbum album:PHAssetCollection) {\n        PHPhotoLibrary.sharedPhotoLibrary().performChanges({\n            // Request creating an asset from the image.\n            let createAssetRequest = PHAssetChangeRequest.creationRequestForAssetFromImage(image)\n\n            // Request editing the album.\n            let albumChangeRequest = PHAssetCollectionChangeRequest(forAssetCollection: album)\n\n            // Get a placeholder for the new asset and add it to the album editing request.\n            let assetPlaceholder = createAssetRequest.placeholderForCreatedAsset\n            albumChangeRequest.addAssets([assetPlaceholder])\n\n            }, completionHandler: { success, error in\n                NSLog(\"Finished adding asset. %@\", (success ? \"Success\" : error))\n        })\n    }\n\n    // ------------------------------ Button Actions ------------------------------\n\n    // Cancel button\n    @IBAction func btnCancel(sender: AnyObject) {\n        self.navigationController?.popToRootViewControllerAnimated(true)\n    }\n\n    // Export/save button\n    @IBAction func btnExport(sender: AnyObject) {\n        characterInfo[\"xPos\"] = characterImg.frame.origin.x\n        characterInfo[\"yPos\"] = characterImg.frame.origin.y\n        characterInfo[\"scale\"] = currScale\n        characterInfo[\"rotation\"] = currRotation\n\n        let imageToSave = getCombinedImage(self.characterImg.image!, bottomImg: self.photoImg.image!)\n        addNewAssetWithImage(imageToSave, toAlbum: self.assetCollection)\n\n        self.navigationController?.popToRootViewControllerAnimated(true)\n    }\n\n    // ** GESTURES **\n    // Gesture: Double Tap\n    @IBOutlet var gestureDoubleTap: UITapGestureRecognizer!\n    @IBAction func handleGestureDoubleTap(recognizer: UITapGestureRecognizer) {\n\n        let location = recognizer.locationInView(self.view)\n        characterImg.hidden = false\n        characterImg.center = location\n\n        // Get a random character head\n        var character = UIImage(named: \"head_\" + String(randomInt(1, max: characterCount)))\n        characterImg.image = character\n    }\n\n    // Gesture: Pan\n    // Allow the user to drag the character around the screen.\n    @IBOutlet var gesturePanCharacter: UIPanGestureRecognizer!\n    @IBAction func handleGesturePanCharacter(recognizer: UIPanGestureRecognizer) {\n        let translation = recognizer.translationInView(self.view)\n        recognizer.view!.center = CGPoint(x:recognizer.view!.center.x + translation.x,\n            y:recognizer.view!.center.y + translation.y)\n        recognizer.setTranslation(CGPointZero, inView: self.view)\n    }\n\n    // Gesture: Pinch (to scale)\n    @IBOutlet var gesturePinchCharacter: UIPinchGestureRecognizer!\n    @IBAction func handleGesturePinchCharacter(recognizer: UIPinchGestureRecognizer) {\n        recognizer.view!.transform = CGAffineTransformScale(recognizer.view!.transform, recognizer.scale, recognizer.scale)\n        currScale *= recognizer.scale\n        recognizer.scale = 1\n    }\n\n    // Gesture: Rotate\n    @IBOutlet var gestureRotateCharacter: UIRotationGestureRecognizer!\n    @IBAction func handleGestureRotateCharacter(recognizer: UIRotationGestureRecognizer) {\n        recognizer.view!.transform = CGAffineTransformRotate(recognizer.view!.transform, recognizer.rotation)\n        currRotation += recognizer.rotation\n        recognizer.rotation = 0\n    }\n\n    // Controller override methods\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Create instances of the gesture recognizers\n        view.addGestureRecognizer(gestureDoubleTap)\n        characterImg.addGestureRecognizer(gesturePanCharacter)\n        characterImg.addGestureRecognizer(gesturePinchCharacter)\n        characterImg.addGestureRecognizer(gestureRotateCharacter)\n    }\n\n    override func viewWillAppear(animated: Bool) {\n        self.navigationController?.setToolbarHidden(false, animated: false)\n        self.displayPhoto()\n    }\n\n    override func viewDidAppear(animated: Bool) {\n        super.viewDidAppear(animated)\n        self.navigationController?.setToolbarHidden(false, animated: false)\n        self.becomeFirstResponder()\n    }\n\n    override func canBecomeFirstResponder() -> Bool {\n        return true\n    }\n\n    // When the camera is shaken, change the character image\n    override func motionEnded(motion: UIEventSubtype, withEvent event: UIEvent) {\n        if(event.subtype == UIEventSubtype.MotionShake) {\n            var character = UIImage(named: \"head_\" + String(randomInt(1, max: characterCount)))\n            characterImg.image = character\n        }\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    // ------------------------------ Optional method implementations ------------------------------\n    // Implement gesture delegate recognizer optional function to allow the user to perform multiple gestures\n    func gestureRecognizer(gestureRecognizer: UIGestureRecognizer!, shouldRecognizeSimultaneouslyWithGestureRecognizer otherGestureRecognizer: UIGestureRecognizer!) -> Bool {\n        return true\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[44,39],[44,39]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true,"skipAtomicTokens":true},"deserializer":"Marker"},"181":{"id":181,"range":[[40,0],[40,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"182":{"id":182,"range":[[41,0],[41,87]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"183":{"id":183,"range":[[44,0],[44,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"184":{"id":184,"range":[[50,0],[50,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[43,0],[43,101]],"newRange":[[43,0],[43,0]],"oldText":"        // Dividing by 2 makes the head appear correctly on iPhone 5s. Need to test on other devices.","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[43,0],[43,0]]},"newParams":{"range":[[42,8],[43,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,8],[43,0]],"newRange":[[42,8],[42,8]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,8],[42,8]]},"newParams":{"range":[[42,6],[42,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,6],[42,8]],"newRange":[[42,6],[42,6]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,6],[42,6]]},"newParams":{"range":[[42,4],[42,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,4],[42,6]],"newRange":[[42,4],[42,4]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,4],[42,4]]},"newParams":{"range":[[42,2],[42,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,2],[42,4]],"newRange":[[42,2],[42,2]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,2],[42,2]]},"newParams":{"range":[[42,0],[42,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,0],[42,2]],"newRange":[[42,0],[42,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[42,0],[42,0]]},"newParams":{"range":[[41,87],[42,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,87],[42,0]],"newRange":[[41,87],[41,87]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,87],[41,87]]},"newParams":{"range":[[41,86],[41,87]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,86],[41,87]],"newRange":[[41,86],[41,86]],"oldText":")","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[40,11],[40,23]]},"newParams":{"tailed":false,"range":[[40,11],[40,11]]},"deserializer":"MarkerPatch"},{"oldRange":[[40,11],[40,23]],"newRange":[[40,11],[40,12]],"oldText":"Define the a","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"properties":{"type":"selection","editorId":4,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"range":[[40,11],[40,11]]},"newParams":{"properties":{"type":"selection","editorId":4,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true,"skipAtomicTokens":true},"range":[[40,12],[40,12]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[44,11],[44,27]]},"newParams":{"tailed":false,"range":[[44,27],[44,27]]},"deserializer":"MarkerPatch"},{"oldRange":[[44,11],[44,27]],"newRange":[[44,11],[44,12]],"oldText":"Create an affine","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,12],[44,12]],"newRange":[[44,12],[44,13]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,13],[44,13]],"newRange":[[44,13],[44,14]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,14],[44,14]],"newRange":[[44,14],[44,15]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,15],[44,15]],"newRange":[[44,15],[44,16]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,16],[44,16]],"newRange":[[44,16],[44,17]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[50,11],[50,23]]},"newParams":{"tailed":false,"range":[[50,11],[50,11]]},"deserializer":"MarkerPatch"},{"oldRange":[[50,11],[50,23]],"newRange":[[50,11],[50,12]],"oldText":"Create the a","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[50,11],[50,11]]},"newParams":{"range":[[50,12],[50,12]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,86],[41,86]],"newRange":[[41,86],[41,87]],"oldText":"","newText":")","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[161,0],[161,4]],"newRange":[[161,0],[161,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[142,0],[142,8]],"newRange":[[142,0],[142,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[124,0],[124,4]],"newRange":[[124,0],[124,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[119,0],[119,4]],"newRange":[[119,0],[119,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[94,0],[94,8]],"newRange":[[94,0],[94,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[79,0],[79,8]],"newRange":[[79,0],[79,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,0],[76,8]],"newRange":[[76,0],[76,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[73,0],[73,8]],"newRange":[[73,0],[73,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[71,0],[71,8]],"newRange":[[71,0],[71,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,8]],"newRange":[[66,0],[66,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[63,0],[63,8]],"newRange":[[63,0],[63,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,8]],"newRange":[[60,0],[60,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[57,0],[57,8]],"newRange":[[57,0],[57,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[54,8]],"newRange":[[54,0],[54,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[49,0],[49,8]],"newRange":[[49,0],[49,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,0],[46,8]],"newRange":[[46,0],[46,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[43,8]],"newRange":[[43,0],[43,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,8]],"newRange":[[39,0],[39,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[35,0],[35,8]],"newRange":[[35,0],[35,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[22,4]],"newRange":[[22,0],[22,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[17,0],[17,4]],"newRange":[[17,0],[17,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[14,0],[14,4]],"newRange":[[14,0],[14,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/iOS/Experiments/Creatures are Friends/Creatures are Friends/PhotoEdit.swift","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"59969e7acc40a8fbac54406021744e06bec65df9","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":false,"editorWidthInChars":null,"scrollTop":624,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/iOS/Experiments/Creatures are Friends/Creatures are Friends/PhotoEdit.swift","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sarah/Dropbox/code/iOS/Experiments/Creatures are Friends/Creatures are Friends/PhotoEdit.swift","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-swift","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["affineContext"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/sarah/Dropbox/code/iOS/Experiments/Creatures are Friends/Creatures are Friends/PhotoEdit.swift":1411669533940},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1490688},"tree-view":{"directoryExpansionStates":{"Creatures are Friends":{}},"selectedPath":"/Users/sarah/Dropbox/code/iOS/Experiments/Creatures are Friends/Creatures are Friends/PhotoEdit.swift","hasFocus":false,"attached":false,"scrollLeft":0,"scrollTop":0,"width":0}}}