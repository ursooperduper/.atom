{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1254,"height":1417},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/sarah/Desktop/music","buffers":[{"text":"#!/usr/bin/env ruby\n\n# require_relative 'menu'\nrequire_relative 'collection'\n\nputs \"********************************************************************************\"\nputs \"**                       Music Recommendationator 3000                        **\"\nputs \"********************************************************************************\"\n\n# Create a collection\ncoll = Collection.new\ncoll.find_similar\n","markers":{"markers":{"2":{"id":2,"range":[[12,0],[12,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":40,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[2,0],[2,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[2,19],[2,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":2,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":2,"oldParams":{"range":[[9,0],[9,0]]},"newParams":{"range":[[8,0],[9,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":2,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":2,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":2,"oldParams":{"range":[[8,0],[8,0]]},"newParams":{"range":[[7,87],[8,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[7,87],[8,0]],"newRange":[[7,87],[7,87]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":2,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Desktop/music/test.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3c3da4057c950789f813dfbaba397ce2365081b8","deserializer":"TextBuffer"},{"text":"module Echonest\n\n  API_URL_ROOT = \"http://developer.echonest.com/api/v4/\"\n\n  if !ENV[\"ECHONEST_API_KEY\"]\n    puts \"You need to sign up for an Echonest Developer Account before using this script.\"\n    puts \"You can sign up for one at http://echonest.com\"\n    exit\n  end\n\n  # Returns basic information about an artist.\n  def artist_info(name, api_config)\n    url_add = \"artist/profile\"\n  end\n\n  # Given a list of artists, returns a list of similar artists.\n  def artist_similar(artists, api_config)\n    url_add = \"artist/similar\"\n  end\n\n  # Search for an artist based on various criteria.\n  def artist_search(name, genre, mood, location, start_year, end_year, results)\n    url_add = \"artist/search\"\n  end\n\n  # Private method that handles the curl call for each API query.\n  # It returns data as a block of JSON.\n  def api_call(url)\n    c = Curl::Easy.http_get(url) do |curl|\n      curl.headers['Accept'] = 'application/json'\n      curl.headers['Content-Type'] = 'application/json'\n      curl.http_auth_types = :basic\n    end\n    c.perform\n    result = JSON.parse c.body_str\n\n    case result[\"response\"][\"status\"][\"code\"]\n    when -1\n      puts \"Something went wrong and it's hard to tell what happened.\"\n      puts \"Please run the script again.\"\n      exit\n    when 0\n      return result\n    when 1\n      puts \"You haven't entered an API key.\"\n      exit\n    when 2\n      puts \"Your API key doesn't have access to this method.\"\n      exit\n    when 3\n      puts \"You've exceeded the rate limit for your API key. Please try again later.\"\n      exit\n    when 4\n      puts \"Your request is missing some data. Please try again.\"\n      exit\n    when 5\n      puts \"Some of the data you specified is invalid. Please try again.\"\n      exit\n    else\n      puts \"Something went wrong and we're not sure what. Please try again.\"\n      exit\n    end\n  end\n\n  private :api_call\nend\n","markers":{"markers":{"1":{"id":1,"range":[[36,5],[36,5]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":52,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[4,5],[8,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[4,9],[4,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[4,10],[4,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[5,9],[6,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[7,8],[7,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Desktop/music/echonest.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"86c44310866701321b732410ab7fae8779076f77","deserializer":"TextBuffer"},{"text":"require 'plist'\nrequire 'json'\nrequire 'curb'\n\nrequire_relative 'echonest'\n\nclass Collection\n  include Echonest\n  attr_reader :music_coll\n\n  ITUNES_LIB = \"iTunes Music Library.xml\"\n  DATA_FILE = \"my_music.json\"\n\n  def initialize\n    @music_coll = {}\n\n    if File.exist? DATA_FILE\n      puts \"Opening your music collection file. Please wait...\"\n      json_block = File.new(DATA_FILE, \"a+\")\n      @music_coll = JSON.parse(json_block.read)\n      puts \"Finished opening your music collection file. Let's get started!\"\n    else\n\n      if File.exist? ITUNES_LIB\n        puts \"Reading iTunes Library.\"\n        puts \"Depending on the size of your music collection, this may take a while.\"\n\n        input = Plist::parse_xml(ITUNES_LIB)\n\n        # Take the opened file and loop through it format the data as a Ruby object.\n        input[\"Tracks\"].each do |item|\n          artist = item[1][\"Artist\"]\n          album = item[1][\"Album\"]\n          kind = item[1][\"Kind\"]\n\n          #Skip items that are movies or tv shows\n          if !kind.include? \"video\"\n            # Then add artists and their albums\n            if !@music_coll.has_key?(artist)\n              @music_coll[artist] = []\n            end\n            if !@music_coll[artist].find_index(album)\n              @music_coll[artist].push(album)\n            end\n          end\n        end\n\n        json_data = JSON.generate(@music_coll)\n        json_file = File.new(DATA_FILE, \"w+\")\n        json_file.puts json_data\n\n        puts \"Finished reading your iTunes library data.\"\n      else\n        puts \"Can't find your iTunes library.\"\n      end\n    end\n  end\n\n  # Allow the user to provide a new iTunes Plist file as they add new music\n  def update_Collection\n  end\n\n  def number_of_artists\n    @music_coll.size\n  end\n\n  def find_similar\n    print \"\\nEnter the name of an artist to find similar artists: \"\n    artist = gets.chomp\n\n    puts \"\\nSearching for artists similar to: #{artist}...\\n\\n\"\n    query_url = \"#{API_URL_ROOT}artist/similar?name=#{artist.gsub(/ /, '+').gsub(/&/, 'and')}&api_key=#{ENV[\"ECHONEST_API_KEY\"]}&results=10&format=json\"\n    result = api_call(query_url)\n\n    if result[\"response\"][\"artists\"].length == 0\n      puts \"No similar artists were found. Please try a new search.\\n\\n\"\n    else\n      in_collection = []\n      not_in_collection = []\n      result[\"response\"][\"artists\"].each do |sim|\n        if @music_coll.has_key?(sim[\"name\"])\n          in_collection << sim[\"name\"]\n        else\n          not_in_collection << sim[\"name\"]\n        end\n      end\n\n      puts \"There were #{in_collection.count} artists already in your collection:\"\n      in_collection.each.with_index(1) do |a, i|\n        puts \"  * #{a}\"\n      end\n\n      puts \"\\nThere were #{not_in_collection.count} artists not in your collection:\"\n      not_in_collection.each.with_index(1) do |a,i|\n        puts \"  #{i}) #{a}\"\n      end\n\n      puts \"\\nEnter the number that corresponds to the artist not in your collection to learn more about them.\"\n      print \"\\nEnter number: \"\n      entry = gets.chomp\n      puts \"\\n\\n\"\n\n      if !entry.match(/\\A\\d\\z/)\n        puts \"No match. Digits only please\"\n      else\n        if not_in_collection[(entry.to_i) - 1] != nil\n          artist_info(not_in_collection[(entry.to_i) - 1])\n        else\n          puts \"Can't find that entry. Try your number again and make sure it corresponds to an artists in the list.\"\n        end\n      end\n    end\n  end\n\n  def artist_info(name)\n    puts \"Searching for #{name}...\\n\\n\"\n    query_url = \"#{API_URL_ROOT}artist/profile?name=#{name.gsub(/ /, '+').gsub(/&/, 'and')}&api_key=#{ENV[\"ECHONEST_API_KEY\"]}&bucket=urls&bucket=biographies&bucket=genre&bucket=years_active&format=json\"\n\n    result = api_call(query_url)\n\n    genres = []\n    str = \"\"\n    result[\"response\"][\"artist\"][\"genres\"].each do |v|\n      genres << v[\"name\"]\n    end\n\n    puts \"Artist: #{name}\"\n    puts \"Genres: #{genres.join(\", \")}\"\n    #puts \"Years Active: Start - #{result[\"response\"][\"artist\"][\"years_active\"]}\"\n    puts \"Official Website: #{result[\"response\"][\"artist\"][\"urls\"][\"official_url\"]}\"\n    puts \"Twitter: #{result[\"response\"][\"artist\"][\"urls\"][\"twitter_url\"]}\"\n    puts \"Wikipedia: #{result[\"response\"][\"artist\"][\"urls\"][\"wikipedia_url\"]}\"\n\n\n\n    #{\"response\"=>{\"status\"=>{\"version\"=>\"4.2\", \"code\"=>5, \"message\"=>\"bucket - Invalid parameter:\n    # bucket \\\"urls,bio\\\" is not one of \\\"audio\\\", \\\"biographies\\\", \\\"blogs\\\", \\\"doc_counts\\\", \\\"familiarity\\\",\n    # \\\"familiarity_rank\\\", \\\"genre\\\", \\\"hotttnesss\\\", \\\"hotttnesss_rank\\\", \\\"discovery\\\", \\\"discovery_rank\\\",\n    # \\\"images\\\", \\\"artist_location\\\", \\\"news\\\", \\\"reviews\\\", \\\"songs\\\", \\\"terms\\\", \\\"urls\\\", \\\"video\\\",\n    # \\\"years_active\\\", \\\"id:7digital-US\\\", \\\"id:7digital-AU\\\", \\\"id:7digital-UK\\\", \\\"id:facebook\\\", \\\"id:fma\\\",\n    # \\\"id:emi_open_collection\\\", \\\"id:emi_bluenote\\\", \\\"id:emi_artists\\\", \\\"id:twitter\\\", \\\"id:spotify-WW\\\",\n    # \\\"id:seatwave\\\", \\\"id:lyricfind-US\\\", \\\"id:jambase\\\", \\\"id:musixmatch-WW\\\", \\\"id:rdio-US\\\", \\\"id:rdio-AT\\\",\n    # \\\"id:rdio-AU\\\", \\\"id:rdio-BR\\\", \\\"id:rdio-CA\\\", \\\"id:rdio-CH\\\", \\\"id:rdio-DE\\\", \\\"id:rdio-DK\\\", \\\"id:rdio-ES\\\",\n    # \\\"id:rdio-FI\\\", \\\"id:rdio-FR\\\", \\\"id:rdio-IE\\\", \\\"id:rdio-IT\\\", \\\"id:rdio-NL\\\", \\\"id:rdio-NO\\\", \\\"id:rdio-NZ\\\",\n    # \\\"id:rdio-PT\\\", \\\"id:rdio-SE\\\", \\\"id:emi_electrospective\\\", \\\"id:rdio-WW\\\", \\\"id:rdio-EE\\\", \\\"id:rdio-LT\\\",\n    # \\\"id:rdio-LV\\\", \\\"id:rdio-IS\\\", \\\"id:rdio-BE\\\", \\\"id:rdio-MX\\\", \\\"id:seatgeek\\\", \\\"id:rdio-GB\\\", \\\"id:rdio-CZ\\\",\n    # \\\"id:rdio-CO\\\", \\\"id:rdio-PL\\\", \\\"id:rdio-MY\\\", \\\"id:rdio-HK\\\", \\\"id:rdio-CL\\\", \\\"id:twitter_numeric\\\",\n    # \\\"id:7digital-ES\\\", \\\"id:openaura\\\", \\\"id:spotifyv2\\\", \\\"id:spotifyv2-ZZ\\\", or \\\"id:<CATALOG ID>\\\"\"}}}\n\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[8,25],[8,25]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":86,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Desktop/music/collection.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"47584dc071b05aa4e944da351e9259693ed36fcc","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env ruby\nrequire 'plist'\n\npl = Plist::parse_xml(\"iTunes Music Library.xml\")\n\nmusic = {}\n\npl[\"Tracks\"].each do |item|\n  artist = item[1][\"Artist\"]\n  album = item[1][\"Album\"]\n  kind = item[1][\"Kind\"]\n\n  # Skip items that are movies or tv shows\n  if !kind.include? \"video\"\n    # Then add artists and their albums (unless they're already in the list)\n    if !music.has_key?(artist)\n      music[artist] = []\n    end\n    if !music[artist].find_index(album)\n      music[artist].push(album)\n    end\n  end\nend\n\nputs music.length\n","markers":{"markers":{"1":{"id":1,"range":[[15,23],[15,23]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":146,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[2,0],[2,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":161,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Desktop/music/test_plist_gem.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2dfdb0457b94c57f45dbb1c7c27728957d329d77","deserializer":"TextBuffer"},{"text":"module Menu\n\n  def main_menu\n\n    puts \"Welcome to the Music Recommendationatronomatic 3000\"\n    puts \"Please use the menu below to get started:\"\n    puts \"------------------------------------------------------------\"\n    puts \"1) Explore my collection\"\n    puts \"2) Update my collection from iTunes\"\n    puts \"3) Discover artists new to me\"\n    puts \"\\nEnter the number that corresponds to your selection.\\n\\n\"\n\n    @main_menu_items = {\n      1 => \"explore_collection\",\n      2 => \"update_collection\",\n      3 => \"discover_new_artists\"\n    }\n\n    handle_menu_num_selection(@main_menu_items)\n  end\n\n  def handle_menu_num_selection(menu_items)\n    user_selection = gets.chomp\n\n    if user_selection.match(/\\d$/)\n      if menu_items.has_key? user_selection\n        menu_items[user_selection]\n      else\n        puts \"Please enter a valid menu item number.\"\n      end\n    else\n\n    end\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[12,20],[12,20]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":165,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[5,9],[5,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[6,9],[6,70]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[7,9],[7,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[8,9],[8,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[9,9],[9,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[9,40],[18,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[12,23],[16,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[13,6],[15,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[10,9],[10,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[24,5],[32,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[18,29],[18,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[24,7],[32,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[24,27],[24,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[25,9],[29,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[25,19],[29,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[25,19],[29,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[26,18],[26,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"22":{"id":22,"range":[[28,13],[28,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Desktop/music/menu.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ee45f4e9ce3d171c30eca881cb31ec03565d01ec","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"id":164,"items":[{"id":40,"softTabs":true,"displayBuffer":{"id":39,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/test.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":161,"softTabs":true,"displayBuffer":{"id":160,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/test_plist_gem.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrap":false,"editorWidthInChars":null,"scrollTop":192,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/echonest.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sarah/Desktop/music/test.rb","focused":false,"deserializer":"Pane"},{"id":43,"items":[{"id":165,"softTabs":true,"displayBuffer":{"id":166,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/menu.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":146,"softTabs":true,"displayBuffer":{"id":147,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/test_plist_gem.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":86,"softTabs":true,"displayBuffer":{"id":87,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Desktop/music/collection.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sarah/Desktop/music/collection.rb","focused":false,"deserializer":"Pane"}],"orientation":"vertical","deserializer":"PaneAxis"},"activePaneId":43,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sarah/Desktop/music/test.rb":1408291648725,"/Users/sarah/Desktop/music/test_plist_gem.rb":1407541658237,"/Users/sarah/Desktop/music/echonest.rb":1407541655611,"/Users/sarah/Desktop/music/menu.rb":1407541651784,"/Users/sarah/Desktop/music/collection.rb":1408291648725},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1427544},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/sarah/Desktop/music/collection.rb","hasFocus":false,"attached":true,"scrollLeft":37,"scrollTop":0,"width":204},"find-and-replace":{"viewState":{"findHistory":["TV"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}