{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1440,"height":900},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/sarah/Dropbox/code/blog","buffers":[{"text":"$LOAD_PATH.unshift 'lib'\n\n# this is optional\nrequire 'rack/cache'\nuse Rack::Cache\n\nrequire 'blog'\nrun Blog\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":16},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/blog/config.ru","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"58881835cc726e7fec6b5ad4c2464c80f6c7fb3c","deserializer":"TextBuffer"},{"text":"require 'sinatra/base'\nrequire 'time'\n\nclass GithubHook < Sinatra::Base\n  def self.parse_git\n    # Parse hash and date from the git log command\n    sha1, date = 'git log HEAD~1..HEAD --pretty=format:%h~%ci'.strip.split('^')\n    set :commit_hash, sha1\n    set :commit_date, Time.parse(date)\n  end\n\n  set(:autopull) { production? }\n  parse_git\n\n  before do\n    cache_control :public, :must_revalidate\n    etag settings.commit_hash\n    last_modified settings.commit_date\n  end\n\n  post '/update' do\n    settings.parse_git\n\n    app.settings.reset!\n    load app.settings.app_file\n\n    content_type :txt\n    if settings.autopull?\n      # Pipe stderr to stdout to make\n      # sure we display everything.\n      'git pull 2>&1'\n    else\n      \"ok\"\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":22},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/blog/lib/github_hook.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7ce854798677ade827bb86c293a4f1e9e55545a3","deserializer":"TextBuffer"},{"text":"require 'sinatra/base'\nrequire 'github_hook'\nrequire 'ostruct'\nrequire 'time'\n\nclass Blog < Sinatra:Base\n  use GithubHook\n\n  # File.expand_path generates an absolute path.\n  # It also takes a path as second argument. The\n  # generated path is treated as being relative\n  # to that path.\n  set :root, File.expand_path('../../', __FILE__)\n  set :articles, []\n  set :app_file, __FILE__\n\n  # loop through all the article files\n  Dir.glob \"#{root}/articles/*.md\" do |file|\n    # parse meta data and content from file\n    meta, content = File.read(file).split(\"\\n\\n\", 2)\n\n    # generate a metadata object\n    article = OpenStruct.new YAML.load(meta)\n\n    # convert the date to a time object\n    article.date = Time.parse article.date.to_s\n\n    # add the content\n    article.content = content\n\n    # generate a slug for the url\n    article.slug = File.basename(file, '.md')\n\n    # set up the route\n    get \"/#{article.slug}\" do\n      erb :post, :locals => { :article => article }\n    end\n\n    # Add article to list of articles\n    articles << article\n  end\n\n  # Sort articles by date, display new articles first\n  articles.sort_by! { |article| article.date }\n  articles.reverse!\n\n  get '/' do\n    erb :index\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[21,13],[21,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":26,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/blog/lib/blog.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"700b73882d77b001f95d982a572b266475ae19b8","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/blog/config.ru","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":22,"softTabs":true,"displayBuffer":{"id":23,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/blog/lib/github_hook.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":26,"softTabs":true,"displayBuffer":{"id":27,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/blog/lib/blog.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/sarah/Dropbox/code/blog/lib/blog.rb","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-ruby"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sarah/Dropbox/code/blog/config.ru":1408065782250,"/Users/sarah/Dropbox/code/blog/lib/github_hook.rb":1408065964988,"/Users/sarah/Dropbox/code/blog/lib/blog.rb":1408065966032},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1043222},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/sarah/Dropbox/code/blog","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":199}}}