{"mode":"editor","version":1,"windowDimensions":{"x":718,"y":23,"width":718,"height":877,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/sarah/code/sicp","buffers":[{"text":"# SICP Exercise 1.1\n\n## Exercises & Solutions\n\n```lisp\n10\n```\n\n=> **10**\n\n```lisp\n(+ 5 3 4)\n```\n\n=> **12**\n\n```lisp\n(- 9 1)\n```\n=> **8**\n\n```lisp\n(/ 6 2)\n```\n\n=> **3**\n\n```lisp\n(+ (* 2 4) (- 4 6) )\n```\n\n=> **6**\n\n```lisp\n(define a 3)\n```\n\n=> **a**\n\n```lisp\n(define b (+ a 1))\n```\n\n=> **b**\n\n```lisp\n(+ a b (* a b))\n```\n\n=> **19**\n\n```lisp\n(= a b)\n```\n\n=> **false**\n\n```lisp\n(if (and (> b a) (< b ( * a b)))\n    b\n    a)\n```\n\n=> **4**\n\n```lisp\n(cond ((= a 4) 6)\n      ((= b 4) (+ 6 7 a))\n      (else 25))\n```\n\n=> **16**\n\n```lisp\n(+ 2 (if (> b a) b a))\n```\n\n=> **6**\n\n```lisp\n(* (cond ((> a b) a)\n         ((< a b) b)\n         (else -1))\n   (+ a 1))\n```\n\n=> **16**\n","markers":{"markers":{"1":{"id":1,"range":[[2,24],[2,24]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[39,0],[42,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[41,1],[42,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[57,0],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[61,1],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[61,1],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[61,1],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[64,0],[87,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[66,6],[66,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[66,17],[87,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[66,17],[87,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[66,17],[87,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"22":{"id":22,"range":[[66,17],[87,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"25":{"id":25,"range":[[67,6],[67,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"27":{"id":27,"range":[[67,15],[67,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"29":{"id":29,"range":[[74,0],[74,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"30":{"id":30,"range":[[74,5],[74,20]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[80,3],[82,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"34":{"id":34,"range":[[80,9],[80,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"36":{"id":36,"range":[[81,8],[82,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"37":{"id":37,"range":[[81,8],[82,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"50":{"id":50,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"55":{"id":55,"range":[[61,1],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"65":{"id":65,"range":[[66,0],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"72":{"id":72,"range":[[68,16],[71,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"81":{"id":81,"range":[[68,16],[71,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"90":{"id":90,"range":[[78,0],[80,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"106":{"id":106,"range":[[83,11],[86,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"828":{"id":828,"range":[[10,0],[11,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"841":{"id":841,"range":[[11,9],[14,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"852":{"id":852,"range":[[11,9],[13,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"863":{"id":863,"range":[[16,0],[17,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"950":{"id":950,"range":[[57,0],[57,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"957":{"id":957,"range":[[61,1],[63,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"996":{"id":996,"range":[[65,0],[65,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"1003":{"id":1003,"range":[[66,0],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"1008":{"id":1008,"range":[[68,16],[69,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-1.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"79a056b1a8cb1490850c5f7cde4543cfd7cdfe2d","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.2\n\n## Solution\n\n```lisp\n(/ (+ 5\n      4\n      (- 2 (- 3) (+ 6 (/ 4 5)))))\n   (* 3\n      (- 6 2)\n      (- 2 7)))\n```\n\nEvaluates to -37/150\n","markers":{"markers":{"1":{"id":1,"range":[[2,11],[2,11]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[5,0],[7,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[5,3],[7,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[7,6],[7,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[7,17],[7,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[7,22],[7,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-2.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"739a00a3a3e7d0360515b798ba8f80ae0935aaa5","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.3\n\n## Exercise\nDefine a procedure that takes three numbers as arguments and returns the sum of the squares f the two larger numbers.\n\n## Solution\n\n```lisp\n(define (square x)\n  (* x x))\n\n(define (sum-of-squares x y)\n  (+ (square x) (square y)))\n\n(define (compare x y z)\n  (if (> x y)\n    (if (> y z) (sum-of-squares x y) (sum-of-squares x z))\n    (if (> x z) (sum-of-squares x y) (sum-of-squares y z))))\n```\n","markers":{"markers":{"1":{"id":1,"range":[[18,3],[18,3]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":21,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[13,0],[19,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[11,0],[12,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[11,8],[11,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[12,2],[12,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[12,16],[12,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[14,0],[17,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[15,2],[17,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[17,4],[17,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"24":{"id":24,"range":[[17,37],[17,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"25":{"id":25,"range":[[17,52],[17,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-3.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"86a2049f6c54410a0f28b1af56767cf269630753","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.4\n\n## Exercise\n\nObserve that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:\n\n```lisp\n(define (a-plus-abs-b a b)\n  ((if (> b 0) + -) a b))\n```\n\n## Solution\n\nThere is a function called `a-plus-abs-b` that evaluates based on two inputs, `a` and `b`.\n\nFirst, check if `b` is greater than 0. If it is, add a + b. If the number is not greater than zero, we subtract a - b.\n","markers":{"markers":{"1":{"id":1,"range":[[16,0],[16,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":29,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"20":{"id":20,"range":[[7,0],[8,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"28":{"id":28,"range":[[7,8],[7,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"38":{"id":38,"range":[[8,2],[8,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"83":{"id":83,"range":[[13,27],[16,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"96":{"id":96,"range":[[13,27],[13,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"125":{"id":125,"range":[[13,78],[16,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"128":{"id":128,"range":[[13,78],[13,80]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"135":{"id":135,"range":[[13,86],[13,88]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"150":{"id":150,"range":[[15,16],[15,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-4.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7bceb2c54a67bb6b5e2452c011dfd7b7c404ebeb","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.5\n\n## Exercise\n\nBen Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:\n\n```lisp\n(define (p) (p))\n\n(define (test x y)\n  (if (= x 0) 0 y))\n```\n\nHe evaluates the expression\n\n```lisp\n(test 0 (p))\n```\n\nWhat behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form `if` is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)\n\n## Solution\n\nFor an interpreter that uses applicative-order evaluation, Ben's test will never end because (p) keeps evaluating - infinite recursion. In normal-order evaluation, the evaluation will execute one step at a time (resulting in 0).\n","markers":{"markers":{"1":{"id":1,"range":[[24,0],[24,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"30":{"id":30,"range":[[7,0],[7,15]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"38":{"id":38,"range":[[9,0],[10,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"46":{"id":46,"range":[[10,2],[10,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"68":{"id":68,"range":[[15,6],[24,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"74":{"id":74,"range":[[16,0],[16,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"108":{"id":108,"range":[[19,197],[19,466]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"117":{"id":117,"range":[[19,251],[19,254]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"247":{"id":247,"range":[[23,0],[23,228]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-5.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f4dd11824d4d70f0f934807e3900c20a54fd55ef","deserializer":"TextBuffer"},{"text":"","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/.Trash/sicp-ex-1-6.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"da39a3ee5e6b4b0d3255bfef95601890afd80709","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.6\n\n## Exercise\n\nAlyssa P. Hacker doesn't see why `if` needs to be provided as a special form. \"Why can't I just define it as an ordinary procedure in terms of `cond`?\" she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of `if`:\n\n```lisp\n(define (new-if predicate then-clause else-clause)\n  (cond (predicate then-clause)\n    (else else-clause)))\n```\n\nEva demonstrates the program for Alyssa:\n\n```lisp\n(new-if (= 2 3) 0 5)\n5\n\n(new-if (= 1 1) 0 5)\n0\n```\n\nDelighted, Alyssa uses `new-if` to rewrite the square-root program:\n\n```lisp\n(define (sqrt-iter guess x)\n  (new-if (good-enough? guess x)\n    guess\n    (sqrt-iter (improve guess x) x)))\n```\n\nWhat happens when Alyssa attempts to use this to computer square roots? Explain.\n\n## Solution\n\n...\n","markers":{"markers":{"1":{"id":1,"range":[[35,0],[35,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":53,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[4,33],[4,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[4,78],[4,150]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[4,143],[4,148]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[4,255],[4,258]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[7,0],[9,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[7,8],[7,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[8,2],[9,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[8,8],[8,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[9,4],[9,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[15,0],[15,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[18,0],[18,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"23":{"id":23,"range":[[20,0],[20,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"29":{"id":29,"range":[[26,2],[28,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"31":{"id":31,"range":[[28,4],[28,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"32":{"id":32,"range":[[28,15],[28,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[35,0],[35,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"34":{"id":34,"range":[[36,0],[36,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-6.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"161d205ad39f433e2fd179e4596bdd63abf3e3fd","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.7\n\n## Exercise\n\nThe `good-enough?` test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. An alternative strategy for implementing `good-enough?` is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this qork better for small and large numbers?\n\n## Solution\n...\n","markers":{"markers":{"1":{"id":1,"range":[[8,0],[8,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":61,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[4,4],[4,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[4,329],[4,342]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-7.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b8b89ef892f6b56812316454843aff5207df42b7","deserializer":"TextBuffer"},{"text":"# SICP Exercise 1.8\n\n## Exercise\n\nNewton's method for cube roots is based on the fact that if `y` is an approximation to the cube root of `x`, then a better approximation is given by the value:\n\nx/y2 + 2y / 3\n\nUse this formula to implement a cube-root procedure analogous to the square root-procedure.\n\n## Solution\n","markers":{"markers":{"1":{"id":1,"range":[[6,13],[6,13]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":69,"goalBufferRange":null,"skipAtomicTokens":true,"preserveFolds":true},"deserializer":"Marker"},"4":{"id":4,"range":[[4,60],[4,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[8,91],[8,91]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-8.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"631ad0f06e819ec31b454079c8436c79a2bbba60","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-1.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-2.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":21,"softTabs":true,"displayBuffer":{"id":22,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-3.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":29,"softTabs":true,"displayBuffer":{"id":30,"softWrapped":true,"editorWidthInChars":null,"scrollTop":144,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-4.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":37,"softTabs":true,"displayBuffer":{"id":38,"softWrapped":true,"editorWidthInChars":null,"scrollTop":284,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-5.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":45,"softTabs":true,"displayBuffer":{"id":46,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/.Trash/sicp-ex-1-6.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":53,"softTabs":true,"displayBuffer":{"id":54,"softWrapped":true,"editorWidthInChars":null,"scrollTop":62,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-6.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":61,"softTabs":true,"displayBuffer":{"id":62,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-7.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":69,"softTabs":true,"displayBuffer":{"id":70,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-8.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-6.md","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-1.md":1412375058378,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-2.md":1412375060713,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-3.md":1412375061689,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-4.md":1412382300624,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-5.md":1412382510120,"/Users/sarah/.Trash/sicp-ex-1-6.md":1412381664531,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-6.md":1412556459603,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-7.md":1412382523493,"/Users/sarah/Dropbox/code/sicp/sicp-ex-1-8.md":1412534873001},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":36163},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/sarah/code/sicp","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}